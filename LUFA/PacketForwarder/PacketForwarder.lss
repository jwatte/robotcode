
PacketForwarder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a7a  00000b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  00800102  00800102  00000b10  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000130  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000250  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000042ed  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010f1  00000000  00000000  00005a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000208e  00000000  00000000  00006b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007a4  00000000  00000000  00008bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000194f  00000000  00000000  00009378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c57  00000000  00000000  0000acc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000480  00000000  00000000  0000d91e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
   6:	00 00       	nop
   8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
   a:	00 00       	nop
   c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
   e:	00 00       	nop
  10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
  12:	00 00       	nop
  14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
  16:	00 00       	nop
  18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
  1e:	00 00       	nop
  20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
  22:	00 00       	nop
  24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
  26:	00 00       	nop
  28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	de c2       	rjmp	.+1468   	; 0x5ea <__vector_11>
  2e:	00 00       	nop
  30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
  32:	00 00       	nop
  34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
  36:	00 00       	nop
  38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
  3e:	00 00       	nop
  40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
  42:	00 00       	nop
  44:	6a c0       	rjmp	.+212    	; 0x11a <__bad_interrupt>
  46:	00 00       	nop
  48:	68 c0       	rjmp	.+208    	; 0x11a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
  4e:	00 00       	nop
  50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
  52:	00 00       	nop
  54:	62 c0       	rjmp	.+196    	; 0x11a <__bad_interrupt>
  56:	00 00       	nop
  58:	60 c0       	rjmp	.+192    	; 0x11a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c1       	rjmp	.+582    	; 0x2a4 <__vector_23>
  5e:	00 00       	nop
  60:	f9 c0       	rjmp	.+498    	; 0x254 <__vector_24>
  62:	00 00       	nop
  64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
  66:	00 00       	nop
  68:	58 c0       	rjmp	.+176    	; 0x11a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	56 c0       	rjmp	.+172    	; 0x11a <__bad_interrupt>
  6e:	00 00       	nop
  70:	54 c0       	rjmp	.+168    	; 0x11a <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	20 03 50 00 61 00 63 00 6b 00 65 00 74 00 46 00      .P.a.c.k.e.t.F.
  84:	6f 00 72 00 77 00 61 00 72 00 64 00 65 00 72 00     o.r.w.a.r.d.e.r.
  94:	00 00                                               ..

00000096 <ManufacturerString>:
  96:	0e 03 6a 00 77 00 61 00 74 00 74 00 65 00 00 00     ..j.w.a.t.t.e...

000000a6 <LanguageString>:
  a6:	04 03 09 04                                         ....

000000aa <ConfigurationDescriptor>:
  aa:	09 02 27 00 01 01 00 c0 32 09 04 00 00 03 ff 00     ..'.....2.......
  ba:	00 00 07 05 81 02 08 00 00 07 05 82 02 40 00 00     .............@..
  ca:	07 05 03 02 40 00 00                                ....@..

000000d1 <DeviceDescriptor>:
  d1:	12 01 10 01 ff 00 00 08 00 f0 01 00 00 01 01 02     ................
  e1:	00 01 00                                            ...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d2 e0       	ldi	r29, 0x02	; 2
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	fa e0       	ldi	r31, 0x0A	; 10
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 30       	cpi	r26, 0x02	; 2
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	a2 e0       	ldi	r26, 0x02	; 2
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a3 31       	cpi	r26, 0x13	; 19
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	6b d1       	rcall	.+726    	; 0x3ee <main>
 118:	ae c4       	rjmp	.+2396   	; 0xa76 <_exit>

0000011a <__bad_interrupt>:
 11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <LEDs_SetAllLEDs>:
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	80 95       	com	r24
 120:	90 63       	ori	r25, 0x30	; 48
 122:	89 23       	and	r24, r25
 124:	8b b9       	out	0x0b, r24	; 11
 126:	08 95       	ret

00000128 <DebugWrite>:
// SRAM is scarce -- the device stalls if we 
//  get to 256
#define BUFFER_SIZE 128

void DebugWrite(uint8_t ch) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 128:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 12a:	f8 94       	cli
        unsigned short n = 1000;
        uint8_t st = UCSR1B;
 12c:	90 91 c9 00 	lds	r25, 0x00C9
        if (st & (1 << TXEN1)) {
 130:	93 ff       	sbrs	r25, 3
 132:	0d c0       	rjmp	.+26     	; 0x14e <DebugWrite+0x26>
 134:	28 ee       	ldi	r18, 0xE8	; 232
 136:	33 e0       	ldi	r19, 0x03	; 3
            while (n > 0) {
                st = UCSR1A;
 138:	90 91 c8 00 	lds	r25, 0x00C8
                if (st & (1 << UDRE1)) {
 13c:	95 ff       	sbrs	r25, 5
 13e:	03 c0       	rjmp	.+6      	; 0x146 <DebugWrite+0x1e>
                    break;
                }
                --n;
            }
            UCSR1A = st;
 140:	90 93 c8 00 	sts	0x00C8, r25
 144:	04 c0       	rjmp	.+8      	; 0x14e <DebugWrite+0x26>
 146:	21 50       	subi	r18, 0x01	; 1
 148:	31 09       	sbc	r19, r1
void DebugWrite(uint8_t ch) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
        unsigned short n = 1000;
        uint8_t st = UCSR1B;
        if (st & (1 << TXEN1)) {
            while (n > 0) {
 14a:	b1 f7       	brne	.-20     	; 0x138 <DebugWrite+0x10>
 14c:	f9 cf       	rjmp	.-14     	; 0x140 <DebugWrite+0x18>
                }
                --n;
            }
            UCSR1A = st;
        }
        UDR1 = ch;
 14e:	80 93 ce 00 	sts	0x00CE, r24
        UCSR1B |= (1 << TXEN1);
 152:	80 91 c9 00 	lds	r24, 0x00C9
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 93 c9 00 	sts	0x00C9, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 15c:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
 15e:	08 95       	ret

00000160 <SetupHardware>:
		USB_USBTask();
		PacketForwarder_Task();
	}
}

void SetupHardware(void) {
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	MCUSR &= ~(1 << WDRF);
 164:	84 b7       	in	r24, 0x34	; 52
 166:	87 7f       	andi	r24, 0xF7	; 247
 168:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 16a:	88 e1       	ldi	r24, 0x18	; 24
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	80 93 60 00 	sts	0x0060, r24
 174:	10 92 60 00 	sts	0x0060, r1
 178:	0f be       	out	0x3f, r0	; 63
    DDRD |= (1 << 7);
 17a:	57 9a       	sbi	0x0a, 7	; 10
    PORTD |= (1 << 7);
 17c:	5f 9a       	sbi	0x0b, 7	; 11
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	80 93 61 00 	sts	0x0061, r24
 18a:	90 93 61 00 	sts	0x0061, r25
 18e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	80 63       	ori	r24, 0x30	; 48
 194:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	80 63       	ori	r24, 0x30	; 48
 19a:	8b b9       	out	0x0b, r24	; 11

	clock_prescale_set(clock_div_1);

	LEDs_Init();
	USB_Init();
 19c:	17 d2       	rcall	.+1070   	; 0x5cc <USB_Init>
 19e:	e9 ec       	ldi	r30, 0xC9	; 201

    UCSR1B = 0;
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	10 82       	st	Z, r1
 1a4:	aa ec       	ldi	r26, 0xCA	; 202
    UCSR1C = 0;
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	1c 92       	st	X, r1
 1aa:	c8 ec       	ldi	r28, 0xC8	; 200
    UCSR1A = 0;
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	18 82       	st	Y, r1
 1b0:	10 92 cb 00 	sts	0x00CB, r1
    UCSR1D = 0;
 1b4:	10 92 cd 00 	sts	0x00CD, r1

    UBRR1H = 0;
 1b8:	80 e1       	ldi	r24, 0x10	; 16
    UBRR1L = 16;    //  B115200
 1ba:	80 93 cc 00 	sts	0x00CC, r24
 1be:	82 e0       	ldi	r24, 0x02	; 2

    UCSR1A = (1 << U2X1);
 1c0:	88 83       	st	Y, r24
 1c2:	8e e0       	ldi	r24, 0x0E	; 14
    UCSR1C = (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10); //  CS8, IGNPAR, STOP2
 1c4:	8c 93       	st	X, r24
 1c6:	80 e9       	ldi	r24, 0x90	; 144
    UCSR1B = (1 << RXCIE1) | (1 << RXEN1);
 1c8:	80 83       	st	Z, r24
 1ca:	5f 98       	cbi	0x0b, 7	; 11

    //  try to reset the remote board
    PORTD &= ~(1 << 7);
 1cc:	5f 9a       	sbi	0x0b, 7	; 11
    PORTD |= (1 << 7);
 1ce:	df 91       	pop	r29
}
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <EVENT_USB_Device_Connect>:
 1d4:	80 e3       	ldi	r24, 0x30	; 48

void EVENT_USB_Device_Connect(void) {
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1d6:	a2 cf       	rjmp	.-188    	; 0x11c <LEDs_SetAllLEDs>

000001d8 <EVENT_USB_Device_Disconnect>:
 1d8:	80 e1       	ldi	r24, 0x10	; 16
}

void EVENT_USB_Device_Disconnect(void) {
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1da:	a0 cf       	rjmp	.-192    	; 0x11c <LEDs_SetAllLEDs>

000001dc <EVENT_USB_Device_ConfigurationChanged>:
 1dc:	cf 93       	push	r28
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 1de:	42 e0       	ldi	r20, 0x02	; 2
 1e0:	61 e8       	ldi	r22, 0x81	; 129
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	3e d1       	rcall	.+636    	; 0x462 <Endpoint_ConfigureEndpoint_Prv>
 1e6:	c8 2f       	mov	r28, r24
 1e8:	42 e3       	ldi	r20, 0x32	; 50
 1ea:	61 e8       	ldi	r22, 0x81	; 129
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	39 d1       	rcall	.+626    	; 0x462 <Endpoint_ConfigureEndpoint_Prv>
 1f0:	c8 23       	and	r28, r24
 1f2:	42 e3       	ldi	r20, 0x32	; 50
	bool ConfigSuccess = true;

    ConfigSuccess &= Endpoint_ConfigureEndpoint(INFO_EPNUM,
        EP_TYPE_BULK, ENDPOINT_DIR_IN, INFO_EPSIZE,
        ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(DATA_TX_EPNUM,
 1f4:	60 e8       	ldi	r22, 0x80	; 128
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	34 d1       	rcall	.+616    	; 0x462 <Endpoint_ConfigureEndpoint_Prv>
 1fa:	c8 23       	and	r28, r24
 1fc:	11 f0       	breq	.+4      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x26>
 1fe:	80 e2       	ldi	r24, 0x20	; 32
        EP_TYPE_BULK, ENDPOINT_DIR_IN, DATA_EPSIZE,
        ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(DATA_RX_EPNUM,
 200:	01 c0       	rjmp	.+2      	; 0x204 <EVENT_USB_Device_ConfigurationChanged+0x28>
        EP_TYPE_BULK, ENDPOINT_DIR_OUT, DATA_EPSIZE,
        ENDPOINT_BANK_SINGLE);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 202:	80 e1       	ldi	r24, 0x10	; 16
 204:	8b df       	rcall	.-234    	; 0x11c <LEDs_SetAllLEDs>
 206:	c1 11       	cpse	r28, r1
 208:	09 c0       	rjmp	.+18     	; 0x21c <EVENT_USB_Device_ConfigurationChanged+0x40>
 20a:	86 e4       	ldi	r24, 0x46	; 70
 20c:	8d df       	rcall	.-230    	; 0x128 <DebugWrite>
    if (!ConfigSuccess) {
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	8b df       	rcall	.-234    	; 0x128 <DebugWrite>
        DebugWrite('F');
 212:	89 e4       	ldi	r24, 0x49	; 73
 214:	89 df       	rcall	.-238    	; 0x128 <DebugWrite>
 216:	8c e4       	ldi	r24, 0x4C	; 76
        DebugWrite('A');
 218:	cf 91       	pop	r28
 21a:	86 cf       	rjmp	.-244    	; 0x128 <DebugWrite>
 21c:	cf 91       	pop	r28
        DebugWrite('I');
 21e:	08 95       	ret

00000220 <StartTransmit>:
 220:	9f b7       	in	r25, 0x3f	; 63
 222:	f8 94       	cli
        DebugWrite('L');
 224:	80 91 c9 00 	lds	r24, 0x00C9
 228:	83 fd       	sbrc	r24, 3
 22a:	0d c0       	rjmp	.+26     	; 0x246 <StartTransmit+0x26>
    }
}
 22c:	80 91 05 01 	lds	r24, 0x0105

void StartTransmit(void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
        //  If I am not currently transmitting
        if (!(UCSR1B & (1 << TXEN1))) {
            UDR1 = tx_buf[tx_tail & (sizeof(tx_buf) - 1)];
 230:	e8 2f       	mov	r30, r24
 232:	ef 77       	andi	r30, 0x7F	; 127
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ea 57       	subi	r30, 0x7A	; 122
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	20 81       	ld	r18, Z
 23c:	20 93 ce 00 	sts	0x00CE, r18
            ++tx_tail;
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 05 01 	sts	0x0105, r24
        }
        UCSR1B = UCSR1B | (1 << UDRIE1) | (1 << TXEN1);
 246:	80 91 c9 00 	lds	r24, 0x00C9
 24a:	88 62       	ori	r24, 0x28	; 40
 24c:	80 93 c9 00 	sts	0x00C9, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 250:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 252:	08 95       	ret

00000254 <__vector_24>:
    }
}

ISR(USART1_UDRE_vect) {
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
    if (tx_head == tx_tail) {
 266:	80 91 05 01 	lds	r24, 0x0105
 26a:	90 91 04 01 	lds	r25, 0x0104
 26e:	98 13       	cpse	r25, r24
 270:	05 c0       	rjmp	.+10     	; 0x27c <__vector_24+0x28>
        UCSR1B = UCSR1B & !((1 << UDRIE1) | (1 << TXEN1));
 272:	80 91 c9 00 	lds	r24, 0x00C9
 276:	10 92 c9 00 	sts	0x00C9, r1
 27a:	0b c0       	rjmp	.+22     	; 0x292 <__vector_24+0x3e>
    }
    else {
        UDR1 = tx_buf[tx_tail & (sizeof(tx_buf) - 1)];
 27c:	e8 2f       	mov	r30, r24
 27e:	ef 77       	andi	r30, 0x7F	; 127
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ea 57       	subi	r30, 0x7A	; 122
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	90 81       	ld	r25, Z
 288:	90 93 ce 00 	sts	0x00CE, r25
        ++tx_tail;
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 05 01 	sts	0x0105, r24
    }
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_23>:

ISR(USART1_RX_vect) {
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
    uint8_t b = UDR1;
 2b8:	90 91 ce 00 	lds	r25, 0x00CE
    rx_buf[rx_head & (sizeof(rx_buf)-1)] = b;
 2bc:	80 91 06 02 	lds	r24, 0x0206
 2c0:	e8 2f       	mov	r30, r24
 2c2:	ef 77       	andi	r30, 0x7F	; 127
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ea 5f       	subi	r30, 0xFA	; 250
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	90 83       	st	Z, r25
    ++rx_head;
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 06 02 	sts	0x0206, r24
    if (rx_head - rx_tail > 127) {
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	20 91 02 01 	lds	r18, 0x0102
 2d8:	82 1b       	sub	r24, r18
 2da:	91 09       	sbc	r25, r1
 2dc:	80 38       	cpi	r24, 0x80	; 128
 2de:	91 05       	cpc	r25, r1
 2e0:	2c f0       	brlt	.+10     	; 0x2ec <__vector_23+0x48>
        ++num_ovf;
 2e2:	80 91 03 01 	lds	r24, 0x0103
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 03 01 	sts	0x0103, r24
    }
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <PacketForwarder_Task>:

void PacketForwarder_Task(void) {
	if (USB_DeviceState != DEVICE_STATE_Configured) {
 300:	80 91 0a 02 	lds	r24, 0x020A
 304:	84 30       	cpi	r24, 0x04	; 4
 306:	09 f0       	breq	.+2      	; 0x30a <PacketForwarder_Task+0xa>
 308:	71 c0       	rjmp	.+226    	; 0x3ec <PacketForwarder_Task+0xec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 310:	80 91 ee 00 	lds	r24, 0x00EE
	  return;
    }

    Endpoint_SelectEndpoint(DATA_TX_EPNUM);
    if (Endpoint_IsConfigured() && Endpoint_IsINReady() && Endpoint_IsReadWriteAllowed()) {
 314:	87 ff       	sbrs	r24, 7
 316:	25 c0       	rjmp	.+74     	; 0x362 <PacketForwarder_Task+0x62>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 318:	80 91 e8 00 	lds	r24, 0x00E8
 31c:	80 ff       	sbrs	r24, 0
 31e:	21 c0       	rjmp	.+66     	; 0x362 <PacketForwarder_Task+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 320:	80 91 e8 00 	lds	r24, 0x00E8
 324:	85 fd       	sbrc	r24, 5
 326:	14 c0       	rjmp	.+40     	; 0x350 <PacketForwarder_Task+0x50>
 328:	1c c0       	rjmp	.+56     	; 0x362 <PacketForwarder_Task+0x62>
        uint8_t n = DATA_EPSIZE;
        while (n > 0 && rx_head != rx_tail) {
            Endpoint_Write_8(rx_buf[rx_tail & (sizeof(rx_buf) - 1)]);
 32a:	e9 2f       	mov	r30, r25
 32c:	ef 77       	andi	r30, 0x7F	; 127
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ea 5f       	subi	r30, 0xFA	; 250
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	20 81       	ld	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 336:	20 93 f1 00 	sts	0x00F1, r18
            ++rx_tail;
 33a:	9f 5f       	subi	r25, 0xFF	; 255
 33c:	90 93 02 01 	sts	0x0102, r25
            --n;
 340:	81 50       	subi	r24, 0x01	; 1
    }

    Endpoint_SelectEndpoint(DATA_TX_EPNUM);
    if (Endpoint_IsConfigured() && Endpoint_IsINReady() && Endpoint_IsReadWriteAllowed()) {
        uint8_t n = DATA_EPSIZE;
        while (n > 0 && rx_head != rx_tail) {
 342:	39 f4       	brne	.+14     	; 0x352 <PacketForwarder_Task+0x52>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 344:	80 91 e8 00 	lds	r24, 0x00E8
 348:	8e 77       	andi	r24, 0x7E	; 126
 34a:	80 93 e8 00 	sts	0x00E8, r24
 34e:	09 c0       	rjmp	.+18     	; 0x362 <PacketForwarder_Task+0x62>
	if (USB_DeviceState != DEVICE_STATE_Configured) {
	  return;
    }

    Endpoint_SelectEndpoint(DATA_TX_EPNUM);
    if (Endpoint_IsConfigured() && Endpoint_IsINReady() && Endpoint_IsReadWriteAllowed()) {
 350:	80 e4       	ldi	r24, 0x40	; 64
        uint8_t n = DATA_EPSIZE;
        while (n > 0 && rx_head != rx_tail) {
 352:	90 91 02 01 	lds	r25, 0x0102
 356:	20 91 06 02 	lds	r18, 0x0206
 35a:	29 13       	cpse	r18, r25
 35c:	e6 cf       	rjmp	.-52     	; 0x32a <PacketForwarder_Task+0x2a>
            Endpoint_Write_8(rx_buf[rx_tail & (sizeof(rx_buf) - 1)]);
            ++rx_tail;
            --n;
        }
        if (n != DATA_EPSIZE) {
 35e:	80 34       	cpi	r24, 0x40	; 64
 360:	89 f7       	brne	.-30     	; 0x344 <PacketForwarder_Task+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 368:	80 91 ee 00 	lds	r24, 0x00EE
            Endpoint_ClearIN();
        }
    }

    Endpoint_SelectEndpoint(DATA_RX_EPNUM);
    if (Endpoint_IsConfigured() && Endpoint_IsOUTReceived() && Endpoint_IsReadWriteAllowed()) {
 36c:	87 ff       	sbrs	r24, 7
 36e:	21 c0       	rjmp	.+66     	; 0x3b2 <PacketForwarder_Task+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 370:	80 91 e8 00 	lds	r24, 0x00E8
 374:	82 ff       	sbrs	r24, 2
 376:	1d c0       	rjmp	.+58     	; 0x3b2 <PacketForwarder_Task+0xb2>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 378:	80 91 e8 00 	lds	r24, 0x00E8
 37c:	85 ff       	sbrs	r24, 5
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <PacketForwarder_Task+0xb2>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 380:	80 91 f2 00 	lds	r24, 0x00F2
        uint8_t n = Endpoint_BytesInEndpoint();
        while (n > 0) {
 384:	0e c0       	rjmp	.+28     	; 0x3a2 <PacketForwarder_Task+0xa2>
            tx_buf[tx_head & (sizeof(tx_buf) - 1)] = Endpoint_Read_8();
 386:	90 91 04 01 	lds	r25, 0x0104
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 38a:	20 91 f1 00 	lds	r18, 0x00F1
 38e:	e9 2f       	mov	r30, r25
 390:	ef 77       	andi	r30, 0x7F	; 127
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	ea 57       	subi	r30, 0x7A	; 122
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	20 83       	st	Z, r18
            ++tx_head;
 39a:	9f 5f       	subi	r25, 0xFF	; 255
 39c:	90 93 04 01 	sts	0x0104, r25
            --n;
 3a0:	81 50       	subi	r24, 0x01	; 1
    }

    Endpoint_SelectEndpoint(DATA_RX_EPNUM);
    if (Endpoint_IsConfigured() && Endpoint_IsOUTReceived() && Endpoint_IsReadWriteAllowed()) {
        uint8_t n = Endpoint_BytesInEndpoint();
        while (n > 0) {
 3a2:	81 11       	cpse	r24, r1
 3a4:	f0 cf       	rjmp	.-32     	; 0x386 <PacketForwarder_Task+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3a6:	80 91 e8 00 	lds	r24, 0x00E8
 3aa:	8b 77       	andi	r24, 0x7B	; 123
 3ac:	80 93 e8 00 	sts	0x00E8, r24
            tx_buf[tx_head & (sizeof(tx_buf) - 1)] = Endpoint_Read_8();
            ++tx_head;
            --n;
        }
        Endpoint_ClearOUT();
        StartTransmit();
 3b0:	37 df       	rcall	.-402    	; 0x220 <StartTransmit>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3b4:	80 93 e9 00 	sts	0x00E9, r24
 3b8:	80 91 ee 00 	lds	r24, 0x00EE
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 3bc:	87 ff       	sbrs	r24, 7
    }

    Endpoint_SelectEndpoint(INFO_EPNUM);
    if (Endpoint_IsConfigured() && Endpoint_IsOUTReceived() && Endpoint_IsReadWriteAllowed()) {
 3be:	16 c0       	rjmp	.+44     	; 0x3ec <PacketForwarder_Task+0xec>
 3c0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3c4:	82 ff       	sbrs	r24, 2
 3c6:	12 c0       	rjmp	.+36     	; 0x3ec <PacketForwarder_Task+0xec>
 3c8:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3cc:	85 ff       	sbrs	r24, 5
 3ce:	0e c0       	rjmp	.+28     	; 0x3ec <PacketForwarder_Task+0xec>
 3d0:	8f b7       	in	r24, 0x3f	; 63
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3d2:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3d4:	90 91 03 01 	lds	r25, 0x0103
            Endpoint_Write_8(num_ovf);
 3d8:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3dc:	10 92 03 01 	sts	0x0103, r1
            num_ovf = 0;
 3e0:	8f bf       	out	0x3f, r24	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3e2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3e6:	8e 77       	andi	r24, 0x7E	; 126
 3e8:	80 93 e8 00 	sts	0x00E8, r24
 3ec:	08 95       	ret

000003ee <main>:
 3ee:	b8 de       	rcall	.-656    	; 0x160 <SetupHardware>
        UCSR1B |= (1 << TXEN1);
    }
}

int main(void) {
	SetupHardware();
 3f0:	80 e1       	ldi	r24, 0x10	; 16
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 3f2:	94 de       	rcall	.-728    	; 0x11c <LEDs_SetAllLEDs>
 3f4:	78 94       	sei
 3f6:	2d d3       	rcall	.+1626   	; 0xa52 <USB_USBTask>
	sei();
 3f8:	83 df       	rcall	.-250    	; 0x300 <PacketForwarder_Task>

	while (true) {
		USB_USBTask();
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <main+0x8>

000003fc <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
 3fc:	29 2f       	mov	r18, r25
 3fe:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
 400:	22 30       	cpi	r18, 0x02	; 2
 402:	31 05       	cpc	r19, r1
 404:	39 f0       	breq	.+14     	; 0x414 <CALLBACK_USB_GetDescriptor+0x18>
 406:	23 30       	cpi	r18, 0x03	; 3
 408:	31 05       	cpc	r19, r1
 40a:	49 f0       	breq	.+18     	; 0x41e <CALLBACK_USB_GetDescriptor+0x22>
 40c:	21 30       	cpi	r18, 0x01	; 1
 40e:	31 05       	cpc	r19, r1
 410:	d9 f0       	breq	.+54     	; 0x448 <CALLBACK_USB_GetDescriptor+0x4c>
 412:	1f c0       	rjmp	.+62     	; 0x452 <CALLBACK_USB_GetDescriptor+0x56>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
 414:	87 e2       	ldi	r24, 0x27	; 39
 416:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
 418:	2a ea       	ldi	r18, 0xAA	; 170
 41a:	30 e0       	ldi	r19, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
 41c:	1e c0       	rjmp	.+60     	; 0x45a <CALLBACK_USB_GetDescriptor+0x5e>
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
 41e:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	91 05       	cpc	r25, r1
 424:	41 f0       	breq	.+16     	; 0x436 <CALLBACK_USB_GetDescriptor+0x3a>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	91 05       	cpc	r25, r1
 42a:	41 f0       	breq	.+16     	; 0x43c <CALLBACK_USB_GetDescriptor+0x40>
 42c:	89 2b       	or	r24, r25
 42e:	89 f4       	brne	.+34     	; 0x452 <CALLBACK_USB_GetDescriptor+0x56>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
 430:	e6 ea       	ldi	r30, 0xA6	; 166
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	05 c0       	rjmp	.+10     	; 0x440 <CALLBACK_USB_GetDescriptor+0x44>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 436:	e6 e9       	ldi	r30, 0x96	; 150
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <CALLBACK_USB_GetDescriptor+0x44>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
 43c:	e4 e7       	ldi	r30, 0x74	; 116
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	84 91       	lpm	r24, Z
 442:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
 444:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
 446:	09 c0       	rjmp	.+18     	; 0x45a <CALLBACK_USB_GetDescriptor+0x5e>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
 448:	82 e1       	ldi	r24, 0x12	; 18
 44a:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
 44c:	21 ed       	ldi	r18, 0xD1	; 209
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	04 c0       	rjmp	.+8      	; 0x45a <CALLBACK_USB_GetDescriptor+0x5e>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
        const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
 45a:	fa 01       	movw	r30, r20
 45c:	31 83       	std	Z+1, r19	; 0x01
 45e:	20 83       	st	Z, r18
    return Size;
}
 460:	08 95       	ret

00000462 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 462:	98 2f       	mov	r25, r24
 464:	2c c0       	rjmp	.+88     	; 0x4be <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 466:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 46a:	98 17       	cp	r25, r24
 46c:	39 f0       	breq	.+14     	; 0x47c <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 46e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 472:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 476:	50 91 f0 00 	lds	r21, 0x00F0
 47a:	03 c0       	rjmp	.+6      	; 0x482 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 47c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 47e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 480:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 482:	21 fd       	sbrc	r18, 1
 484:	02 c0       	rjmp	.+4      	; 0x48a <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 486:	9f 5f       	subi	r25, 0xFF	; 255
 488:	1a c0       	rjmp	.+52     	; 0x4be <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 48a:	30 91 eb 00 	lds	r19, 0x00EB
 48e:	3e 7f       	andi	r19, 0xFE	; 254
 490:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 494:	30 91 ed 00 	lds	r19, 0x00ED
 498:	3d 7f       	andi	r19, 0xFD	; 253
 49a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 49e:	30 91 eb 00 	lds	r19, 0x00EB
 4a2:	31 60       	ori	r19, 0x01	; 1
 4a4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 4a8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 4ac:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 4b0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 4b4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 4b8:	27 fd       	sbrc	r18, 7
 4ba:	e5 cf       	rjmp	.-54     	; 0x486 <Endpoint_ConfigureEndpoint_Prv+0x24>
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <Endpoint_ConfigureEndpoint_Prv+0x68>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 4be:	95 30       	cpi	r25, 0x05	; 5
 4c0:	90 f2       	brcs	.-92     	; 0x466 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 4c2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 4ca:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 4cc:	08 95       	ret

000004ce <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4ce:	80 91 0b 02 	lds	r24, 0x020B
 4d2:	87 fd       	sbrc	r24, 7
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4d6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4da:	80 ff       	sbrs	r24, 0
 4dc:	0e c0       	rjmp	.+28     	; 0x4fa <Endpoint_ClearStatusStage+0x2c>
 4de:	12 c0       	rjmp	.+36     	; 0x504 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4e0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 4e4:	82 fd       	sbrc	r24, 2
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4e8:	80 91 0a 02 	lds	r24, 0x020A
 4ec:	81 11       	cpse	r24, r1
 4ee:	f8 cf       	rjmp	.-16     	; 0x4e0 <Endpoint_ClearStatusStage+0x12>
 4f0:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4f2:	80 91 e8 00 	lds	r24, 0x00E8
 4f6:	8b 77       	andi	r24, 0x7B	; 123
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4fa:	80 91 0a 02 	lds	r24, 0x020A
 4fe:	81 11       	cpse	r24, r1
 500:	ea cf       	rjmp	.-44     	; 0x4d6 <Endpoint_ClearStatusStage+0x8>
 502:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 504:	80 91 e8 00 	lds	r24, 0x00E8
 508:	8e 77       	andi	r24, 0x7E	; 126
 50a:	80 93 e8 00 	sts	0x00E8, r24
 50e:	08 95       	ret

00000510 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	00 d0       	rcall	.+0      	; 0x516 <USB_ResetInterface+0x6>
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 51a:	61 d0       	rcall	.+194    	; 0x5de <USB_INT_DisableAllInterrupts>
 51c:	63 d0       	rcall	.+198    	; 0x5e4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 51e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 522:	8f 77       	andi	r24, 0x7F	; 127
 524:	80 93 d8 00 	sts	0x00D8, r24
 528:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
 52c:	80 68       	ori	r24, 0x80	; 128
 52e:	80 93 d8 00 	sts	0x00D8, r24
 532:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 536:	8f 7d       	andi	r24, 0xDF	; 223
 538:	80 93 d8 00 	sts	0x00D8, r24
 53c:	84 e0       	ldi	r24, 0x04	; 4
 53e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 540:	86 e0       	ldi	r24, 0x06	; 6
 542:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 544:	09 b4       	in	r0, 0x29	; 41
 546:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 548:	fd cf       	rjmp	.-6      	; 0x544 <USB_ResetInterface+0x34>
 54a:	10 92 0a 02 	sts	0x020A, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 54e:	10 92 07 02 	sts	0x0207, r1
	USB_Device_ConfigurationNumber  = 0;
 552:	10 92 08 02 	sts	0x0208, r1
	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 556:	ae 01       	movw	r20, r28
 558:	4f 5f       	subi	r20, 0xFF	; 255
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
	}
	#else
	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	4c df       	rcall	.-360    	; 0x3fc <CALLBACK_USB_GetDescriptor>
 564:	89 2b       	or	r24, r25
 566:	31 f0       	breq	.+12     	; 0x574 <USB_ResetInterface+0x64>
 568:	e9 81       	ldd	r30, Y+1	; 0x01
 56a:	fa 81       	ldd	r31, Y+2	; 0x02
 56c:	37 96       	adiw	r30, 0x07	; 7
		#if defined(USE_RAM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
		#elif defined(USE_EEPROM_DESCRIPTORS)
		USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
		#else
		USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 56e:	e4 91       	lpm	r30, Z
 570:	e0 93 00 01 	sts	0x0100, r30
 574:	20 91 00 01 	lds	r18, 0x0100
 578:	30 e0       	ldi	r19, 0x00	; 0
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
 57a:	88 e0       	ldi	r24, 0x08	; 8
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	40 e0       	ldi	r20, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 580:	03 c0       	rjmp	.+6      	; 0x588 <USB_ResetInterface+0x78>
 582:	4f 5f       	subi	r20, 0xFF	; 255
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 588:	82 17       	cp	r24, r18
					CheckBytes <<= 1;
 58a:	93 07       	cpc	r25, r19
 58c:	d0 f3       	brcs	.-12     	; 0x582 <USB_ResetInterface+0x72>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 58e:	42 95       	swap	r20
 590:	40 7f       	andi	r20, 0xF0	; 240
 592:	42 60       	ori	r20, 0x02	; 2
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	80 e0       	ldi	r24, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 598:	64 df       	rcall	.-312    	; 0x462 <Endpoint_ConfigureEndpoint_Prv>
 59a:	80 91 e1 00 	lds	r24, 0x00E1
 59e:	8e 7f       	andi	r24, 0xFE	; 254
 5a0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5a4:	80 91 e2 00 	lds	r24, 0x00E2
 5a8:	81 60       	ori	r24, 0x01	; 1
 5aa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5ae:	80 91 e2 00 	lds	r24, 0x00E2
 5b2:	88 60       	ori	r24, 0x08	; 8
 5b4:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5b8:	80 91 e0 00 	lds	r24, 0x00E0
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 93 e0 00 	sts	0x00E0, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5ca:	08 95       	ret

000005cc <USB_Init>:
 5cc:	e3 e6       	ldi	r30, 0x63	; 99
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	8e 7f       	andi	r24, 0xFE	; 254
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 5d4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 09 02 	sts	0x0209, r24

	USB_ResetInterface();
 5dc:	99 cf       	rjmp	.-206    	; 0x510 <USB_ResetInterface>

000005de <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5de:	10 92 e2 00 	sts	0x00E2, r1
 5e2:	08 95       	ret

000005e4 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 5e4:	10 92 e1 00 	sts	0x00E1, r1
 5e8:	08 95       	ret

000005ea <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	4f 93       	push	r20
 5fa:	5f 93       	push	r21
 5fc:	6f 93       	push	r22
 5fe:	7f 93       	push	r23
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	ef 93       	push	r30
 60a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 60c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 610:	82 ff       	sbrs	r24, 2
 612:	0a c0       	rjmp	.+20     	; 0x628 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 614:	80 91 e2 00 	lds	r24, 0x00E2
 618:	82 ff       	sbrs	r24, 2
 61a:	06 c0       	rjmp	.+12     	; 0x628 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 61c:	80 91 e1 00 	lds	r24, 0x00E1
 620:	8b 7f       	andi	r24, 0xFB	; 251
 622:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 626:	14 d2       	rcall	.+1064   	; 0xa50 <USB_Event_Stub>
 628:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 62c:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 62e:	17 c0       	rjmp	.+46     	; 0x65e <__vector_11+0x74>
 630:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 634:	80 ff       	sbrs	r24, 0
 636:	13 c0       	rjmp	.+38     	; 0x65e <__vector_11+0x74>
 638:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 63c:	8e 7f       	andi	r24, 0xFE	; 254
 63e:	80 93 e2 00 	sts	0x00E2, r24
 642:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 646:	80 61       	ori	r24, 0x10	; 16
 648:	80 93 e2 00 	sts	0x00E2, r24
 64c:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 650:	80 62       	ori	r24, 0x20	; 32
 652:	80 93 d8 00 	sts	0x00D8, r24
 656:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 658:	10 92 0a 02 	sts	0x020A, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 65c:	bd dd       	rcall	.-1158   	; 0x1d8 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
 65e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 662:	84 ff       	sbrs	r24, 4
 664:	2d c0       	rjmp	.+90     	; 0x6c0 <__vector_11+0xd6>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 666:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 66a:	84 ff       	sbrs	r24, 4
 66c:	29 c0       	rjmp	.+82     	; 0x6c0 <__vector_11+0xd6>
 66e:	84 e0       	ldi	r24, 0x04	; 4
 670:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 672:	86 e0       	ldi	r24, 0x06	; 6
 674:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 676:	09 b4       	in	r0, 0x29	; 41
 678:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 67a:	fd cf       	rjmp	.-6      	; 0x676 <__vector_11+0x8c>
 67c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 680:	8f 7d       	andi	r24, 0xDF	; 223
 682:	80 93 d8 00 	sts	0x00D8, r24
 686:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 68a:	8f 7e       	andi	r24, 0xEF	; 239
 68c:	80 93 e1 00 	sts	0x00E1, r24
 690:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 694:	8f 7e       	andi	r24, 0xEF	; 239
 696:	80 93 e2 00 	sts	0x00E2, r24
 69a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	80 93 e2 00 	sts	0x00E2, r24
 6a4:	80 91 07 02 	lds	r24, 0x0207
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6a8:	81 11       	cpse	r24, r1
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <__vector_11+0xca>
 6ac:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6b0:	87 ff       	sbrs	r24, 7
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__vector_11+0xce>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 6b4:	84 e0       	ldi	r24, 0x04	; 4
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <__vector_11+0xd0>
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	80 93 0a 02 	sts	0x020A, r24
 6be:	8a dd       	rcall	.-1260   	; 0x1d4 <EVENT_USB_Device_Connect>
 6c0:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 6c4:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6c6:	31 c0       	rjmp	.+98     	; 0x72a <__vector_11+0x140>
 6c8:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6cc:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6ce:	2d c0       	rjmp	.+90     	; 0x72a <__vector_11+0x140>
 6d0:	80 91 e1 00 	lds	r24, 0x00E1
 6d4:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6d6:	80 93 e1 00 	sts	0x00E1, r24
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	80 93 0a 02 	sts	0x020A, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6e0:	10 92 07 02 	sts	0x0207, r1
 6e4:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
 6e8:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6ea:	80 93 e1 00 	sts	0x00E1, r24
 6ee:	80 91 e2 00 	lds	r24, 0x00E2
 6f2:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6f4:	80 93 e2 00 	sts	0x00E2, r24
 6f8:	80 91 e2 00 	lds	r24, 0x00E2
 6fc:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6fe:	80 93 e2 00 	sts	0x00E2, r24
 702:	20 91 00 01 	lds	r18, 0x0100
 706:	30 e0       	ldi	r19, 0x00	; 0

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
 708:	88 e0       	ldi	r24, 0x08	; 8
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	40 e0       	ldi	r20, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 70e:	03 c0       	rjmp	.+6      	; 0x716 <__vector_11+0x12c>
 710:	4f 5f       	subi	r20, 0xFF	; 255
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 716:	82 17       	cp	r24, r18
					CheckBytes <<= 1;
 718:	93 07       	cpc	r25, r19
 71a:	d0 f3       	brcs	.-12     	; 0x710 <__vector_11+0x126>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 71c:	42 95       	swap	r20
 71e:	40 7f       	andi	r20, 0xF0	; 240
 720:	42 60       	ori	r20, 0x02	; 2
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	80 e0       	ldi	r24, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 726:	9d de       	rcall	.-710    	; 0x462 <Endpoint_ConfigureEndpoint_Prv>
 728:	93 d1       	rcall	.+806    	; 0xa50 <USB_Event_Stub>
 72a:	ff 91       	pop	r31
 72c:	ef 91       	pop	r30
 72e:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 730:	af 91       	pop	r26
 732:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 734:	8f 91       	pop	r24
 736:	7f 91       	pop	r23
 738:	6f 91       	pop	r22
 73a:	5f 91       	pop	r21
 73c:	4f 91       	pop	r20
 73e:	3f 91       	pop	r19
 740:	2f 91       	pop	r18
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

0000074c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 74c:	20 91 11 02 	lds	r18, 0x0211
 750:	30 91 12 02 	lds	r19, 0x0212
 754:	26 17       	cp	r18, r22
 756:	37 07       	cpc	r19, r23
 758:	48 f0       	brcs	.+18     	; 0x76c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 75a:	61 15       	cp	r22, r1
 75c:	71 05       	cpc	r23, r1
 75e:	39 f4       	brne	.+14     	; 0x76e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 760:	20 91 e8 00 	lds	r18, 0x00E8
 764:	2e 77       	andi	r18, 0x7E	; 126
 766:	20 93 e8 00 	sts	0x00E8, r18
 76a:	01 c0       	rjmp	.+2      	; 0x76e <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 76c:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 76e:	fc 01       	movw	r30, r24
 770:	40 e0       	ldi	r20, 0x00	; 0
 772:	39 c0       	rjmp	.+114    	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x9a>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 774:	80 91 0a 02 	lds	r24, 0x020A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 778:	88 23       	and	r24, r24
 77a:	09 f4       	brne	.+2      	; 0x77e <Endpoint_Write_Control_PStream_LE+0x32>
 77c:	48 c0       	rjmp	.+144    	; 0x80e <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 77e:	85 30       	cpi	r24, 0x05	; 5
 780:	09 f4       	brne	.+2      	; 0x784 <Endpoint_Write_Control_PStream_LE+0x38>
 782:	47 c0       	rjmp	.+142    	; 0x812 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 784:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 788:	83 fd       	sbrc	r24, 3
 78a:	3f c0       	rjmp	.+126    	; 0x80a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 78c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 790:	82 fd       	sbrc	r24, 2
 792:	35 c0       	rjmp	.+106    	; 0x7fe <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 794:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 798:	80 ff       	sbrs	r24, 0
 79a:	25 c0       	rjmp	.+74     	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x9a>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 79c:	20 91 f2 00 	lds	r18, 0x00F2
 7a0:	30 e0       	ldi	r19, 0x00	; 0
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
 7a2:	2e 1b       	sub	r18, r30
 7a4:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7a8:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7aa:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 7ae:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 7b0:	61 50       	subi	r22, 0x01	; 1
 7b2:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
 7b4:	c9 01       	movw	r24, r18
 7b6:	8e 0f       	add	r24, r30
 7b8:	9f 1f       	adc	r25, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7ba:	61 15       	cp	r22, r1
 7bc:	71 05       	cpc	r23, r1
 7be:	31 f0       	breq	.+12     	; 0x7cc <Endpoint_Write_Control_PStream_LE+0x80>
 7c0:	40 91 00 01 	lds	r20, 0x0100
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	84 17       	cp	r24, r20
 7c8:	95 07       	cpc	r25, r21
 7ca:	70 f3       	brcs	.-36     	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 7cc:	20 91 00 01 	lds	r18, 0x0100
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	82 17       	cp	r24, r18
 7d6:	93 07       	cpc	r25, r19
 7d8:	09 f0       	breq	.+2      	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x90>
 7da:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7dc:	80 91 e8 00 	lds	r24, 0x00E8
 7e0:	8e 77       	andi	r24, 0x7E	; 126
 7e2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7e6:	61 15       	cp	r22, r1
 7e8:	71 05       	cpc	r23, r1
 7ea:	21 f6       	brne	.-120    	; 0x774 <Endpoint_Write_Control_PStream_LE+0x28>
 7ec:	41 11       	cpse	r20, r1
 7ee:	c2 cf       	rjmp	.-124    	; 0x774 <Endpoint_Write_Control_PStream_LE+0x28>
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7f2:	80 91 0a 02 	lds	r24, 0x020A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7f6:	88 23       	and	r24, r24
 7f8:	51 f0       	breq	.+20     	; 0x80e <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7fa:	85 30       	cpi	r24, 0x05	; 5
 7fc:	51 f0       	breq	.+20     	; 0x812 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7fe:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 802:	82 ff       	sbrs	r24, 2
 804:	f6 cf       	rjmp	.-20     	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 80e:	82 e0       	ldi	r24, 0x02	; 2
 810:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 812:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 814:	08 95       	ret

00000816 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 816:	ef 92       	push	r14
 818:	ff 92       	push	r15
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	00 d0       	rcall	.+0      	; 0x824 <USB_Device_ProcessControlRequest+0xe>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 828:	eb e0       	ldi	r30, 0x0B	; 11
 82a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 82c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 830:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	e3 31       	cpi	r30, 0x13	; 19
 836:	f8 07       	cpc	r31, r24
 838:	c9 f7       	brne	.-14     	; 0x82c <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 83a:	0a d1       	rcall	.+532    	; 0xa50 <USB_Event_Stub>
 83c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 840:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 842:	ef c0       	rjmp	.+478    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 844:	80 91 0b 02 	lds	r24, 0x020B
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 848:	90 91 0c 02 	lds	r25, 0x020C

		switch (USB_ControlRequest.bRequest)
 84c:	95 30       	cpi	r25, 0x05	; 5
 84e:	09 f4       	brne	.+2      	; 0x852 <USB_Device_ProcessControlRequest+0x3c>
 850:	72 c0       	rjmp	.+228    	; 0x936 <USB_Device_ProcessControlRequest+0x120>
 852:	38 f4       	brcc	.+14     	; 0x862 <USB_Device_ProcessControlRequest+0x4c>
 854:	91 30       	cpi	r25, 0x01	; 1
 856:	89 f1       	breq	.+98     	; 0x8ba <USB_Device_ProcessControlRequest+0xa4>
 858:	70 f0       	brcs	.+28     	; 0x876 <USB_Device_ProcessControlRequest+0x60>
 85a:	93 30       	cpi	r25, 0x03	; 3
 85c:	09 f0       	breq	.+2      	; 0x860 <USB_Device_ProcessControlRequest+0x4a>
 85e:	e1 c0       	rjmp	.+450    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 860:	2c c0       	rjmp	.+88     	; 0x8ba <USB_Device_ProcessControlRequest+0xa4>
 862:	98 30       	cpi	r25, 0x08	; 8
 864:	09 f4       	brne	.+2      	; 0x868 <USB_Device_ProcessControlRequest+0x52>
 866:	af c0       	rjmp	.+350    	; 0x9c6 <USB_Device_ProcessControlRequest+0x1b0>
 868:	99 30       	cpi	r25, 0x09	; 9
 86a:	09 f4       	brne	.+2      	; 0x86e <USB_Device_ProcessControlRequest+0x58>
 86c:	be c0       	rjmp	.+380    	; 0x9ea <USB_Device_ProcessControlRequest+0x1d4>
 86e:	96 30       	cpi	r25, 0x06	; 6
 870:	09 f0       	breq	.+2      	; 0x874 <USB_Device_ProcessControlRequest+0x5e>
 872:	d7 c0       	rjmp	.+430    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 874:	88 c0       	rjmp	.+272    	; 0x986 <USB_Device_ProcessControlRequest+0x170>
 876:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 878:	21 f0       	breq	.+8      	; 0x882 <USB_Device_ProcessControlRequest+0x6c>
 87a:	82 38       	cpi	r24, 0x82	; 130
 87c:	09 f0       	breq	.+2      	; 0x880 <USB_Device_ProcessControlRequest+0x6a>
 87e:	d1 c0       	rjmp	.+418    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 880:	03 c0       	rjmp	.+6      	; 0x888 <USB_Device_ProcessControlRequest+0x72>
 882:	90 91 08 02 	lds	r25, 0x0208
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 886:	0f c0       	rjmp	.+30     	; 0x8a6 <USB_Device_ProcessControlRequest+0x90>
 888:	80 91 0f 02 	lds	r24, 0x020F
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 88c:	90 91 10 02 	lds	r25, 0x0210
 890:	8f 70       	andi	r24, 0x0F	; 15
 892:	99 27       	eor	r25, r25
 894:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 898:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 89c:	95 fb       	bst	r25, 5
 89e:	99 27       	eor	r25, r25
 8a0:	90 f9       	bld	r25, 0
 8a2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8a6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8aa:	87 7f       	andi	r24, 0xF7	; 247
 8ac:	80 93 e8 00 	sts	0x00E8, r24
 8b0:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 8b4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 8b8:	91 c0       	rjmp	.+290    	; 0x9dc <USB_Device_ProcessControlRequest+0x1c6>
 8ba:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8bc:	19 f0       	breq	.+6      	; 0x8c4 <USB_Device_ProcessControlRequest+0xae>
 8be:	82 30       	cpi	r24, 0x02	; 2
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <USB_Device_ProcessControlRequest+0xae>
 8c2:	af c0       	rjmp	.+350    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 8c4:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 8c6:	82 30       	cpi	r24, 0x02	; 2
 8c8:	09 f0       	breq	.+2      	; 0x8cc <USB_Device_ProcessControlRequest+0xb6>
 8ca:	ab c0       	rjmp	.+342    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 8cc:	80 91 0d 02 	lds	r24, 0x020D

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 8d0:	81 11       	cpse	r24, r1
 8d2:	2b c0       	rjmp	.+86     	; 0x92a <USB_Device_ProcessControlRequest+0x114>
 8d4:	80 91 0f 02 	lds	r24, 0x020F
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8d8:	90 91 10 02 	lds	r25, 0x0210
 8dc:	8f 70       	andi	r24, 0x0F	; 15
 8de:	99 27       	eor	r25, r25
 8e0:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <USB_Device_ProcessControlRequest+0xd0>
 8e4:	9e c0       	rjmp	.+316    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 8e6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8ea:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 8ee:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 8f0:	1c c0       	rjmp	.+56     	; 0x92a <USB_Device_ProcessControlRequest+0x114>
 8f2:	20 91 0c 02 	lds	r18, 0x020C
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 8f6:	23 30       	cpi	r18, 0x03	; 3
 8f8:	21 f4       	brne	.+8      	; 0x902 <USB_Device_ProcessControlRequest+0xec>
 8fa:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 8fe:	80 62       	ori	r24, 0x20	; 32
 900:	12 c0       	rjmp	.+36     	; 0x926 <USB_Device_ProcessControlRequest+0x110>
 902:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 906:	90 61       	ori	r25, 0x10	; 16
 908:	90 93 eb 00 	sts	0x00EB, r25
 90c:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	01 c0       	rjmp	.+2      	; 0x914 <USB_Device_ProcessControlRequest+0xfe>
 912:	22 0f       	add	r18, r18
 914:	8a 95       	dec	r24
 916:	ea f7       	brpl	.-6      	; 0x912 <USB_Device_ProcessControlRequest+0xfc>
 918:	20 93 ea 00 	sts	0x00EA, r18
 91c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 920:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 924:	88 60       	ori	r24, 0x08	; 8
 926:	80 93 eb 00 	sts	0x00EB, r24
 92a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 92e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 932:	87 7f       	andi	r24, 0xF7	; 247
 934:	56 c0       	rjmp	.+172    	; 0x9e2 <USB_Device_ProcessControlRequest+0x1cc>
 936:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 938:	74 c0       	rjmp	.+232    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 93a:	e0 90 0d 02 	lds	r14, 0x020D
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 93e:	f0 90 0e 02 	lds	r15, 0x020E
 942:	e8 94       	clt
 944:	e7 f8       	bld	r14, 7
 946:	ff 24       	eor	r15, r15
 948:	0e 2d       	mov	r16, r14
 94a:	1f b7       	in	r17, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 94c:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 94e:	80 91 e8 00 	lds	r24, 0x00E8
 952:	87 7f       	andi	r24, 0xF7	; 247
 954:	80 93 e8 00 	sts	0x00E8, r24
 958:	ba dd       	rcall	.-1164   	; 0x4ce <Endpoint_ClearStatusStage>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 95a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 95e:	80 ff       	sbrs	r24, 0
 960:	fc cf       	rjmp	.-8      	; 0x95a <USB_Device_ProcessControlRequest+0x144>

	while (!(Endpoint_IsINReady()));
 962:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 966:	80 78       	andi	r24, 0x80	; 128
 968:	8e 29       	or	r24, r14
 96a:	80 93 e3 00 	sts	0x00E3, r24

				UDADDR = Temp;
 96e:	80 68       	ori	r24, 0x80	; 128
 970:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 974:	00 23       	and	r16, r16
 976:	11 f0       	breq	.+4      	; 0x97c <USB_Device_ProcessControlRequest+0x166>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 978:	83 e0       	ldi	r24, 0x03	; 3
 97a:	01 c0       	rjmp	.+2      	; 0x97e <USB_Device_ProcessControlRequest+0x168>
 97c:	82 e0       	ldi	r24, 0x02	; 2
 97e:	80 93 0a 02 	sts	0x020A, r24
 982:	1f bf       	out	0x3f, r17	; 63
 984:	4e c0       	rjmp	.+156    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 986:	80 58       	subi	r24, 0x80	; 128
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
 988:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 98a:	08 f0       	brcs	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0x178>
 98c:	4a c0       	rjmp	.+148    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 98e:	ae 01       	movw	r20, r28
 990:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 992:	5f 4f       	sbci	r21, 0xFF	; 255
 994:	60 91 0f 02 	lds	r22, 0x020F
 998:	80 91 0d 02 	lds	r24, 0x020D
 99c:	90 91 0e 02 	lds	r25, 0x020E
 9a0:	2d dd       	rcall	.-1446   	; 0x3fc <CALLBACK_USB_GetDescriptor>
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <USB_Device_ProcessControlRequest+0x192>
 9a6:	3d c0       	rjmp	.+122    	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 9a8:	20 91 e8 00 	lds	r18, 0x00E8
 9ac:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9ae:	20 93 e8 00 	sts	0x00E8, r18
 9b2:	bc 01       	movw	r22, r24
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 9b8:	c9 de       	rcall	.-622    	; 0x74c <Endpoint_Write_Control_PStream_LE>
 9ba:	80 91 e8 00 	lds	r24, 0x00E8
 9be:	8b 77       	andi	r24, 0x7B	; 123
 9c0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 9c4:	2e c0       	rjmp	.+92     	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 9c6:	80 38       	cpi	r24, 0x80	; 128
 9c8:	61 f5       	brne	.+88     	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 9ca:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 9ce:	87 7f       	andi	r24, 0xF7	; 247
 9d0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9d4:	80 91 07 02 	lds	r24, 0x0207
 9d8:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 9dc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9e0:	8e 77       	andi	r24, 0x7E	; 126
 9e2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9e6:	73 dd       	rcall	.-1306   	; 0x4ce <Endpoint_ClearStatusStage>
 9e8:	1c c0       	rjmp	.+56     	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 9ea:	81 11       	cpse	r24, r1
 9ec:	1a c0       	rjmp	.+52     	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 9ee:	90 91 0d 02 	lds	r25, 0x020D
 9f2:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9f4:	b0 f4       	brcc	.+44     	; 0xa22 <USB_Device_ProcessControlRequest+0x20c>
 9f6:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9fa:	87 7f       	andi	r24, 0xF7	; 247
 9fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a00:	90 93 07 02 	sts	0x0207, r25
 a04:	64 dd       	rcall	.-1336   	; 0x4ce <Endpoint_ClearStatusStage>
 a06:	80 91 07 02 	lds	r24, 0x0207
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a0a:	81 11       	cpse	r24, r1
 a0c:	04 c0       	rjmp	.+8      	; 0xa16 <USB_Device_ProcessControlRequest+0x200>

	Endpoint_ClearStatusStage();
 a0e:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
 a12:	87 ff       	sbrs	r24, 7
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <USB_Device_ProcessControlRequest+0x204>
 a16:	84 e0       	ldi	r24, 0x04	; 4
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x206>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	80 93 0a 02 	sts	0x020A, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a20:	dd db       	rcall	.-2118   	; 0x1dc <EVENT_USB_Device_ConfigurationChanged>
 a22:	80 91 e8 00 	lds	r24, 0x00E8
 a26:	83 ff       	sbrs	r24, 3
 a28:	0a c0       	rjmp	.+20     	; 0xa3e <USB_Device_ProcessControlRequest+0x228>
 a2a:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
 a2e:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a30:	80 93 eb 00 	sts	0x00EB, r24

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a34:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a38:	87 7f       	andi	r24, 0xF7	; 247
 a3a:	80 93 e8 00 	sts	0x00E8, r24
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	1f 91       	pop	r17
 a48:	0f 91       	pop	r16
 a4a:	ff 90       	pop	r15
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 a4c:	ef 90       	pop	r14
 a4e:	08 95       	ret

00000a50 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 a50:	08 95       	ret

00000a52 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a52:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 a54:	80 91 0a 02 	lds	r24, 0x020A
 a58:	88 23       	and	r24, r24
 a5a:	59 f0       	breq	.+22     	; 0xa72 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a5c:	c0 91 e9 00 	lds	r28, 0x00E9
 a60:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a62:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a66:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 a6a:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 a6c:	d4 de       	rcall	.-600    	; 0x816 <USB_Device_ProcessControlRequest>
 a6e:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a72:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
 a74:	08 95       	ret

00000a76 <_exit>:
 a76:	f8 94       	cli

00000a78 <__stop_program>:
 a78:	ff cf       	rjmp	.-2      	; 0xa78 <__stop_program>
