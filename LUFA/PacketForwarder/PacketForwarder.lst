   1               		.file	"PacketForwarder.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.LEDs_SetAllLEDs,"ax",@progbits
  12               	LEDs_SetAllLEDs:
  13               	.LFB21:
  14               		.file 1 "../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h"
   1:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** /*
   2:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****              LUFA Library
   3:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****      Copyright (C) Dean Camera, 2012.
   4:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
   5:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****            www.lufa-lib.org
   7:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** */
   8:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
   9:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** /*
  10:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  12:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   software and its documentation for any purpose is hereby granted
  14:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   without fee, provided that the above copyright notice appear in
  15:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   all copies and that both that the copyright notice and this
  16:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   documentation, and that the name of the author not be used in
  18:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   advertising or publicity pertaining to distribution of the
  19:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   software without specific, written prior permission.
  20:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  21:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   The author disclaim all warranties with regard to this
  22:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   software, including all implied warranties of merchantability
  23:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   special, indirect or consequential damages or any damages
  25:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   in an action of contract, negligence or other tortious action,
  27:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   arising out of or in connection with the use or performance of
  28:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****   this software.
  29:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** */
  30:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  31:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** /** \file
  32:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *  \brief Board specific LED driver header for the Arduino Uno.
  33:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *  \copydetails Group_LEDs_UNO
  34:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *
  35:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *        dispatch header located in LUFA/Drivers/Board/LEDs.h.
  37:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  */
  38:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  39:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** /** \ingroup Group_LEDs
  40:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *  \defgroup Group_LEDs_UNO UNO
  41:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *  \brief Board specific LED driver header for the Arduino Uno.
  42:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *
  43:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *  Board specific LED driver header for the Arduino Uno (http://arduino.cc/en/Main/ArduinoBoardUno
  44:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *
  45:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  *  @{
  46:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h ****  */
  47:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  48:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** #ifndef __LEDS_UNO_H__
  49:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** #define __LEDS_UNO_H__
  50:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  51:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 	/* Includes: */
  52:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		#include "../../../../Common/Common.h"
  53:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  54:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 	/* Enable C linkage for C++ Compilers: */
  55:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		#if defined(__cplusplus)
  56:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			extern "C" {
  57:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		#endif
  58:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  59:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 	/* Preprocessor Checks: */
  60:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		#if !defined(__INCLUDE_FROM_LEDS_H)
  61:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Board/LEDS.h instead.
  62:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		#endif
  63:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  64:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 	/* Public Interface - May be used in end-application: */
  65:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		/* Macros: */
  66:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			/** LED mask for the first LED on the board. */
  67:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			#define LEDS_LED1        (1 << 4)
  68:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  69:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			/** LED mask for the second LED on the board. */
  70:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			#define LEDS_LED2        (1 << 5)
  71:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  72:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			/** LED mask for all the LEDs on the board. */
  73:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			#define LEDS_ALL_LEDS    (LEDS_LED1 | LEDS_LED2)
  74:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  75:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			/** LED mask for none of the board LEDs. */
  76:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			#define LEDS_NO_LEDS     0
  77:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  78:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		/* Inline Functions: */
  79:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 		#if !defined(__DOXYGEN__)
  80:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			static inline void LEDs_Init(void)
  81:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			{
  82:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				DDRD  |= LEDS_ALL_LEDS;
  83:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				PORTD |= LEDS_ALL_LEDS;
  84:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			}
  85:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  86:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			static inline void LEDs_Disable(void)
  87:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			{
  88:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				DDRD  &= ~LEDS_ALL_LEDS;
  89:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				PORTD &= ~LEDS_ALL_LEDS;
  90:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			}
  91:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  92:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
  93:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			{
  94:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				PORTD &= ~LEDMask;
  95:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			}
  96:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
  97:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
  98:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			{
  99:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				PORTD |= LEDMask;
 100:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			}
 101:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 
 102:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
 103:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 			{
  15               		.loc 1 103 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 104:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
  22               		.loc 1 104 0
  23 0000 9BB1      		in r25,0xb
  24 0002 8095      		com r24
  25               	.LVL1:
  26 0004 9063      		ori r25,lo8(48)
  27 0006 8923      		and r24,r25
  28               	.LVL2:
  29 0008 8BB9      		out 0xb,r24
  30 000a 0895      		ret
  31               		.cfi_endproc
  32               	.LFE21:
  34               		.section	.text.DebugWrite,"ax",@progbits
  35               	.global	DebugWrite
  37               	DebugWrite:
  38               	.LFB107:
  39               		.file 2 "PacketForwarder.c"
   1:PacketForwarder.c **** 
   2:PacketForwarder.c **** #include "PacketForwarder.h"
   3:PacketForwarder.c **** #include <avr/io.h>
   4:PacketForwarder.c **** #include <util/atomic.h>
   5:PacketForwarder.c **** 
   6:PacketForwarder.c **** 
   7:PacketForwarder.c **** // SRAM is scarce -- the device stalls if we 
   8:PacketForwarder.c **** //  get to 256
   9:PacketForwarder.c **** #define BUFFER_SIZE 128
  10:PacketForwarder.c **** 
  11:PacketForwarder.c **** void DebugWrite(uint8_t ch) {
  40               		.loc 2 11 0
  41               		.cfi_startproc
  42               	.LVL3:
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 0 */
  46               	.L__stack_usage = 0
  47               	.LBB74:
  12:PacketForwarder.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  48               		.loc 2 12 0
  49 0000 4FB7      		in r20,__SREG__
  50               	.LVL4:
  51               	.LBB75:
  52               	.LBB76:
  53               		.file 3 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h"
   1:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
   4:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
   7:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  10:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  15:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  19:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** */
  31:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  32:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  34:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  37:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  40:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** {
  44:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     sei();
  45:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** }
  47:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  48:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** {
  50:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     cli();
  54               		.loc 3 50 0
  55               	/* #APP */
  56               	 ;  50 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h" 1
  57 0002 F894      		cli
  58               	 ;  0 "" 2
  59               	.LVL5:
  60               	/* #NOAPP */
  61               	.LBE76:
  62               	.LBE75:
  63               	.LBB77:
  13:PacketForwarder.c ****         unsigned short n = 1000;
  14:PacketForwarder.c ****         uint8_t st = UCSR1B;
  64               		.loc 2 14 0
  65 0004 9091 C900 		lds r25,201
  66               	.LVL6:
  15:PacketForwarder.c ****         if (st & (1 << TXEN1)) {
  67               		.loc 2 15 0
  68 0008 93FF      		sbrs r25,3
  69 000a 00C0      		rjmp .L3
  70 000c 28EE      		ldi r18,lo8(-24)
  71 000e 33E0      		ldi r19,lo8(3)
  72               	.LVL7:
  73               	.L5:
  16:PacketForwarder.c ****             while (n > 0) {
  17:PacketForwarder.c ****                 st = UCSR1A;
  74               		.loc 2 17 0
  75 0010 9091 C800 		lds r25,200
  76               	.LVL8:
  18:PacketForwarder.c ****                 if (st & (1 << UDRE1)) {
  77               		.loc 2 18 0
  78 0014 95FF      		sbrs r25,5
  79 0016 00C0      		rjmp .L4
  80               	.L6:
  19:PacketForwarder.c ****                     break;
  20:PacketForwarder.c ****                 }
  21:PacketForwarder.c ****                 --n;
  22:PacketForwarder.c ****             }
  23:PacketForwarder.c ****             UCSR1A = st;
  81               		.loc 2 23 0
  82 0018 9093 C800 		sts 200,r25
  83 001c 00C0      		rjmp .L3
  84               	.L4:
  85 001e 2150      		subi r18,1
  86 0020 3109      		sbc r19,__zero_reg__
  16:PacketForwarder.c ****             while (n > 0) {
  87               		.loc 2 16 0
  88 0022 01F4      		brne .L5
  89 0024 00C0      		rjmp .L6
  90               	.L3:
  24:PacketForwarder.c ****         }
  25:PacketForwarder.c ****         UDR1 = ch;
  91               		.loc 2 25 0
  92 0026 8093 CE00 		sts 206,r24
  26:PacketForwarder.c ****         UCSR1B |= (1 << TXEN1);
  93               		.loc 2 26 0
  94 002a 8091 C900 		lds r24,201
  95               	.LVL9:
  96 002e 8860      		ori r24,lo8(8)
  97 0030 8093 C900 		sts 201,r24
  98               	.LVL10:
  99               	.LBE77:
 100               	.LBB78:
 101               	.LBB79:
  51:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** }
  53:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  54:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** {
  56:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     sei();
  57:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** }
  60:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  61:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** {
  63:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     cli();
  64:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** }
  67:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** 
  68:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h **** {
  70:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     SREG = *__s;
 102               		.loc 3 70 0
 103 0034 4FBF      		out __SREG__,r20
  71:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 104               		.loc 3 71 0
 105 0036 0895      		ret
 106               	.LBE79:
 107               	.LBE78:
 108               	.LBE74:
 109               		.cfi_endproc
 110               	.LFE107:
 112               		.section	.text.SetupHardware,"ax",@progbits
 113               	.global	SetupHardware
 115               	SetupHardware:
 116               	.LFB109:
  27:PacketForwarder.c ****     }
  28:PacketForwarder.c **** }
  29:PacketForwarder.c **** 
  30:PacketForwarder.c **** int main(void) {
  31:PacketForwarder.c **** 	SetupHardware();
  32:PacketForwarder.c **** 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
  33:PacketForwarder.c **** 	sei();
  34:PacketForwarder.c **** 
  35:PacketForwarder.c **** 	while (true) {
  36:PacketForwarder.c **** 		USB_USBTask();
  37:PacketForwarder.c **** 		PacketForwarder_Task();
  38:PacketForwarder.c **** 	}
  39:PacketForwarder.c **** }
  40:PacketForwarder.c **** 
  41:PacketForwarder.c **** void SetupHardware(void) {
 117               		.loc 2 41 0
 118               		.cfi_startproc
 119 0000 CF93      		push r28
 120               	.LCFI0:
 121               		.cfi_def_cfa_offset 3
 122               		.cfi_offset 28, -2
 123 0002 DF93      		push r29
 124               	.LCFI1:
 125               		.cfi_def_cfa_offset 4
 126               		.cfi_offset 29, -3
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 2 */
 130               	.L__stack_usage = 2
  42:PacketForwarder.c **** 	MCUSR &= ~(1 << WDRF);
 131               		.loc 2 42 0
 132 0004 84B7      		in r24,0x34
 133 0006 877F      		andi r24,lo8(-9)
 134 0008 84BF      		out 0x34,r24
  43:PacketForwarder.c **** 	wdt_disable();
 135               		.loc 2 43 0
 136 000a 88E1      		ldi r24,lo8(24)
 137               	/* #APP */
 138               	 ;  43 "PacketForwarder.c" 1
 139 000c 0FB6      		in __tmp_reg__, __SREG__
 140 000e F894      		cli
 141 0010 8093 6000 		sts 96, r24
 142 0014 1092 6000 		sts 96, __zero_reg__
 143 0018 0FBE      		out __SREG__,__tmp_reg__
 144               		
 145               	 ;  0 "" 2
  44:PacketForwarder.c ****     DDRD |= (1 << 7);
 146               		.loc 2 44 0
 147               	/* #NOAPP */
 148 001a 579A      		sbi 0xa,7
  45:PacketForwarder.c ****     PORTD |= (1 << 7);
 149               		.loc 2 45 0
 150 001c 5F9A      		sbi 0xb,7
 151               	.LVL11:
 152               	.LBB84:
 153               	.LBB85:
 154               		.file 4 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h"
   1:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
   4:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
   7:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      distribution.
  13:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  17:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  29:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  31:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  34:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  37:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  38:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \file */
  39:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  41:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  43:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  47:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  50:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  54:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  59:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
  60:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  61:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  62:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  64:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** <small>
  66:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** <center>
  67:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  69:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  73:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  74:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  75:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  79:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  80:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  81:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  85:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  86:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  87:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  91:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  92:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  93:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  97:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  98:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  99:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 103:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 104:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 105:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 109:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 110:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 111:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 115:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 116:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 117:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 121:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 122:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 123:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 127:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 128:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 129:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 133:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 134:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 135:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 139:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 140:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 141:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 145:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 146:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 147:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 151:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 152:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 153:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 157:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 158:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 159:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 163:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 164:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 165:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 169:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 170:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 171:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 175:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 176:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 177:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 181:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 182:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 183:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 187:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 188:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 189:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 193:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 194:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 195:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 199:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 200:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 201:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 205:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 206:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 207:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 211:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 212:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 213:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 217:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 218:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 219:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 223:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 224:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 225:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 229:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 230:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 231:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 235:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 236:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 237:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 241:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 242:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 243:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 247:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 248:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 249:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 253:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 254:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 255:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 259:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 260:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 261:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 265:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 266:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 267:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 271:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 272:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 273:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 277:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 278:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 279:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 283:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 284:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 285:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 289:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 290:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 291:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 295:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 296:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 297:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 301:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 302:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 303:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 307:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 308:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 309:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 313:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 314:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 315:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 319:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 320:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 321:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 325:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 326:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 327:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 331:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 332:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 333:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 337:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 338:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 339:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 343:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 344:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 345:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 349:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** </table>
 350:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** </center>
 351:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** </small>
 352:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 353:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** @} */
 354:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 355:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 369:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 372:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 375:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 378:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 383:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 392:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 394:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 402:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 403:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 404:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 406:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 414:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
 415:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 416:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 433:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 434:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 437:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 440:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 445:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 450:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 459:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 468:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 477:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 486:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 495:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 504:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
 505:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 506:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 512:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 514:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 522:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 523:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 524:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 526:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 534:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 535:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 541:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 544:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 547:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 550:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 553:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 556:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 559:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 562:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 565:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 568:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 571:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 574:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 577:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 580:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 582:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 585:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 586:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 588:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 591:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 592:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 593:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 595:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 598:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 601:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 604:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 607:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 610:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 613:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 616:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 619:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 622:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 625:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 628:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 630:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 633:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 634:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 636:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 639:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 640:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 641:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 646:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 649:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 652:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 655:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 658:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 661:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 664:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 667:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 670:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 673:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 675:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 678:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 679:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 681:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 684:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 685:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 686:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 689:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 690:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 693:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 696:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 699:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 702:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 705:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 708:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 711:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 714:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 717:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 720:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 722:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 725:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 726:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 728:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 731:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 732:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 733:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 735:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 736:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 739:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 742:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 745:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 748:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 751:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 754:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 757:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 760:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 763:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 765:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 768:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 769:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 771:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 774:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 775:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 776:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 778:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 781:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 784:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 787:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 790:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 794:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 798:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 802:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 805:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 806:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 813:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 816:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 819:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 822:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 825:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 828:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 832:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 836:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 840:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 843:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 844:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 846:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 849:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 852:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 855:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 859:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 863:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 866:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 867:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 881:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 884:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 887:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 890:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 893:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 896:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 897:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 915:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 918:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 921:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 924:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 927:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 930:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 933:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 934:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 943:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 946:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 949:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 952:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 955:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 958:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 961:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 964:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 967:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 970:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 971:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 973:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 976:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 979:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 982:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 985:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 988:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 991:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 994:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 997:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 998:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1000:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1003:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1006:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1009:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1013:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1016:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1017:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1032:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1035:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1038:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1041:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1044:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1047:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1050:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1053:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1056:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1057:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1074:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1077:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1080:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1083:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1087:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1090:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1091:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1093:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1094:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1097:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1100:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1103:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1106:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1109:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1112:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1115:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1118:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1121:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1123:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1126:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1127:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1129:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1132:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1133:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1134:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1139:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1140:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1143:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1146:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1149:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1153:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1156:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1159:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1162:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1163:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1169:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1172:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1175:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1178:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1181:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1184:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1187:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1190:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1193:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1194:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1197:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1198:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1201:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1204:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1207:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1210:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1213:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1216:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1219:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1220:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1226:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1229:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1232:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1235:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1238:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1241:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1243:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1246:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1247:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1249:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1252:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1253:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1254:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1256:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1259:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1262:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1265:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1268:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1271:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1274:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1277:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1280:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1283:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1286:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1289:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1292:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1294:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1297:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1298:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1300:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1303:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1304:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1305:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1311:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1314:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1317:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1320:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1321:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1324:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1327:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1330:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1333:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1336:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1339:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1342:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
1343:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1344:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1345:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1432:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1433:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1435:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1440:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
1443:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1444:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1445:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \code 
1447:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** typedef enum
1448:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** {
1449:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \endcode
1461:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1463:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
1464:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** typedef enum
1465:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** {
1466:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
1478:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1480:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1481:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1483:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1486:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1490:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
1492:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** {
1494:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     __asm__ __volatile__ (
 155               		.loc 4 1495 0
 156 001e 90E0      		ldi r25,0
 157 0020 80E8      		ldi r24,lo8(-128)
 158               	/* #APP */
 159               	 ;  1495 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/avr/power.h" 1
 160 0022 0FB6      		in __tmp_reg__,__SREG__
 161 0024 F894      		cli
 162 0026 8093 6100 		sts 97, r24
 163 002a 9093 6100 		sts 97, r25
 164 002e 0FBE      		out __SREG__, __tmp_reg__
 165               	 ;  0 "" 2
 166               	/* #NOAPP */
 167               	.LBE85:
 168               	.LBE84:
 169               	.LBB86:
 170               	.LBB87:
  82:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				DDRD  |= LEDS_ALL_LEDS;
 171               		.loc 1 82 0
 172 0030 8AB1      		in r24,0xa
 173 0032 8063      		ori r24,lo8(48)
 174 0034 8AB9      		out 0xa,r24
  83:../../../LUFA-120219/LUFA/Drivers/Board/AVR8/UNO/LEDs.h **** 				PORTD |= LEDS_ALL_LEDS;
 175               		.loc 1 83 0
 176 0036 8BB1      		in r24,0xb
 177 0038 8063      		ori r24,lo8(48)
 178 003a 8BB9      		out 0xb,r24
 179               	.LBE87:
 180               	.LBE86:
  46:PacketForwarder.c **** 
  47:PacketForwarder.c **** 	clock_prescale_set(clock_div_1);
  48:PacketForwarder.c **** 
  49:PacketForwarder.c **** 	LEDs_Init();
  50:PacketForwarder.c **** 	USB_Init();
 181               		.loc 2 50 0
 182 003c 0E94 0000 		call USB_Init
 183               	.LVL12:
  51:PacketForwarder.c **** 
  52:PacketForwarder.c ****     UCSR1B = 0;
 184               		.loc 2 52 0
 185 0040 E9EC      		ldi r30,lo8(-55)
 186 0042 F0E0      		ldi r31,0
 187 0044 1082      		st Z,__zero_reg__
  53:PacketForwarder.c ****     UCSR1C = 0;
 188               		.loc 2 53 0
 189 0046 AAEC      		ldi r26,lo8(-54)
 190 0048 B0E0      		ldi r27,0
 191 004a 1C92      		st X,__zero_reg__
  54:PacketForwarder.c ****     UCSR1A = 0;
 192               		.loc 2 54 0
 193 004c C8EC      		ldi r28,lo8(-56)
 194 004e D0E0      		ldi r29,0
 195 0050 1882      		st Y,__zero_reg__
  55:PacketForwarder.c ****     UCSR1D = 0;
 196               		.loc 2 55 0
 197 0052 1092 CB00 		sts 203,__zero_reg__
  56:PacketForwarder.c **** 
  57:PacketForwarder.c ****     UBRR1H = 0;
 198               		.loc 2 57 0
 199 0056 1092 CD00 		sts 205,__zero_reg__
  58:PacketForwarder.c ****     UBRR1L = 16;    //  B115200
 200               		.loc 2 58 0
 201 005a 80E1      		ldi r24,lo8(16)
 202 005c 8093 CC00 		sts 204,r24
  59:PacketForwarder.c **** 
  60:PacketForwarder.c ****     UCSR1A = (1 << U2X1);
 203               		.loc 2 60 0
 204 0060 82E0      		ldi r24,lo8(2)
 205 0062 8883      		st Y,r24
  61:PacketForwarder.c ****     UCSR1C = (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10); //  CS8, IGNPAR, STOP2
 206               		.loc 2 61 0
 207 0064 8EE0      		ldi r24,lo8(14)
 208 0066 8C93      		st X,r24
  62:PacketForwarder.c ****     UCSR1B = (1 << RXCIE1) | (1 << RXEN1);
 209               		.loc 2 62 0
 210 0068 80E9      		ldi r24,lo8(-112)
 211 006a 8083      		st Z,r24
  63:PacketForwarder.c **** 
  64:PacketForwarder.c ****     //  try to reset the remote board
  65:PacketForwarder.c ****     PORTD &= ~(1 << 7);
 212               		.loc 2 65 0
 213 006c 5F98      		cbi 0xb,7
  66:PacketForwarder.c ****     PORTD |= (1 << 7);
 214               		.loc 2 66 0
 215 006e 5F9A      		sbi 0xb,7
 216               	/* epilogue start */
  67:PacketForwarder.c **** }
 217               		.loc 2 67 0
 218 0070 DF91      		pop r29
 219 0072 CF91      		pop r28
 220 0074 0895      		ret
 221               		.cfi_endproc
 222               	.LFE109:
 224               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 225               	.global	EVENT_USB_Device_Connect
 227               	EVENT_USB_Device_Connect:
 228               	.LFB110:
  68:PacketForwarder.c **** 
  69:PacketForwarder.c **** void EVENT_USB_Device_Connect(void) {
 229               		.loc 2 69 0
 230               		.cfi_startproc
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 0 */
 234               	.L__stack_usage = 0
  70:PacketForwarder.c **** 	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 235               		.loc 2 70 0
 236 0000 80E3      		ldi r24,lo8(48)
 237 0002 0C94 0000 		jmp LEDs_SetAllLEDs
 238               	.LVL13:
 239               		.cfi_endproc
 240               	.LFE110:
 242               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 243               	.global	EVENT_USB_Device_Disconnect
 245               	EVENT_USB_Device_Disconnect:
 246               	.LFB111:
  71:PacketForwarder.c **** }
  72:PacketForwarder.c **** 
  73:PacketForwarder.c **** void EVENT_USB_Device_Disconnect(void) {
 247               		.loc 2 73 0
 248               		.cfi_startproc
 249               	/* prologue: function */
 250               	/* frame size = 0 */
 251               	/* stack size = 0 */
 252               	.L__stack_usage = 0
  74:PacketForwarder.c **** 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 253               		.loc 2 74 0
 254 0000 80E1      		ldi r24,lo8(16)
 255 0002 0C94 0000 		jmp LEDs_SetAllLEDs
 256               	.LVL14:
 257               		.cfi_endproc
 258               	.LFE111:
 260               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 261               	.global	EVENT_USB_Device_ConfigurationChanged
 263               	EVENT_USB_Device_ConfigurationChanged:
 264               	.LFB112:
  75:PacketForwarder.c **** }
  76:PacketForwarder.c **** 
  77:PacketForwarder.c **** void EVENT_USB_Device_ConfigurationChanged(void) {
 265               		.loc 2 77 0
 266               		.cfi_startproc
 267 0000 CF93      		push r28
 268               	.LCFI2:
 269               		.cfi_def_cfa_offset 3
 270               		.cfi_offset 28, -2
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 1 */
 274               	.L__stack_usage = 1
 275               	.LVL15:
 276               	.LBB88:
 277               	.LBB89:
 278               		.file 5 "../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 148:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 279               		.loc 5 276 0
 280 0002 42E0      		ldi r20,lo8(2)
 281 0004 61E8      		ldi r22,lo8(-127)
 282 0006 81E0      		ldi r24,lo8(1)
 283 0008 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 284               	.LVL16:
 285 000c C82F      		mov r28,r24
 286               	.LVL17:
 287               	.LBE89:
 288               	.LBE88:
 289               	.LBB90:
 290               	.LBB91:
 291 000e 42E3      		ldi r20,lo8(50)
 292 0010 61E8      		ldi r22,lo8(-127)
 293 0012 82E0      		ldi r24,lo8(2)
 294               	.LVL18:
 295 0014 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 296               	.LVL19:
  78:PacketForwarder.c **** 	bool ConfigSuccess = true;
  79:PacketForwarder.c **** 
  80:PacketForwarder.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(INFO_EPNUM,
  81:PacketForwarder.c ****         EP_TYPE_BULK, ENDPOINT_DIR_IN, INFO_EPSIZE,
  82:PacketForwarder.c ****         ENDPOINT_BANK_SINGLE);
  83:PacketForwarder.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(DATA_TX_EPNUM,
 297               		.loc 2 83 0
 298 0018 C823      		and r28,r24
 299               	.LVL20:
 300               	.LBE91:
 301               	.LBE90:
 302               	.LBB92:
 303               	.LBB93:
 304               		.loc 5 276 0
 305 001a 42E3      		ldi r20,lo8(50)
 306 001c 60E8      		ldi r22,lo8(-128)
 307 001e 83E0      		ldi r24,lo8(3)
 308 0020 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 309               	.LVL21:
  84:PacketForwarder.c ****         EP_TYPE_BULK, ENDPOINT_DIR_IN, DATA_EPSIZE,
  85:PacketForwarder.c ****         ENDPOINT_BANK_SINGLE);
  86:PacketForwarder.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(DATA_RX_EPNUM,
 310               		.loc 2 86 0
 311 0024 C823      		and r28,r24
 312               	.LVL22:
 313               	.LBE93:
 314               	.LBE92:
  87:PacketForwarder.c ****         EP_TYPE_BULK, ENDPOINT_DIR_OUT, DATA_EPSIZE,
  88:PacketForwarder.c ****         ENDPOINT_BANK_SINGLE);
  89:PacketForwarder.c **** 
  90:PacketForwarder.c **** 	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 315               		.loc 2 90 0
 316 0026 01F0      		breq .L17
 317 0028 80E2      		ldi r24,lo8(32)
 318 002a 00C0      		rjmp .L15
 319               	.L17:
 320 002c 80E1      		ldi r24,lo8(16)
 321               	.L15:
 322               		.loc 2 90 0 is_stmt 0 discriminator 3
 323 002e 0E94 0000 		call LEDs_SetAllLEDs
 324               	.LVL23:
  91:PacketForwarder.c ****     if (!ConfigSuccess) {
 325               		.loc 2 91 0 is_stmt 1 discriminator 3
 326 0032 C111      		cpse r28,__zero_reg__
 327 0034 00C0      		rjmp .L14
  92:PacketForwarder.c ****         DebugWrite('F');
 328               		.loc 2 92 0
 329 0036 86E4      		ldi r24,lo8(70)
 330 0038 0E94 0000 		call DebugWrite
 331               	.LVL24:
  93:PacketForwarder.c ****         DebugWrite('A');
 332               		.loc 2 93 0
 333 003c 81E4      		ldi r24,lo8(65)
 334 003e 0E94 0000 		call DebugWrite
 335               	.LVL25:
  94:PacketForwarder.c ****         DebugWrite('I');
 336               		.loc 2 94 0
 337 0042 89E4      		ldi r24,lo8(73)
 338 0044 0E94 0000 		call DebugWrite
 339               	.LVL26:
  95:PacketForwarder.c ****         DebugWrite('L');
 340               		.loc 2 95 0
 341 0048 8CE4      		ldi r24,lo8(76)
 342               	/* epilogue start */
  96:PacketForwarder.c ****     }
  97:PacketForwarder.c **** }
 343               		.loc 2 97 0
 344 004a CF91      		pop r28
 345               	.LVL27:
  95:PacketForwarder.c ****         DebugWrite('L');
 346               		.loc 2 95 0
 347 004c 0C94 0000 		jmp DebugWrite
 348               	.LVL28:
 349               	.L14:
 350               	/* epilogue start */
 351               		.loc 2 97 0
 352 0050 CF91      		pop r28
 353               	.LVL29:
 354 0052 0895      		ret
 355               		.cfi_endproc
 356               	.LFE112:
 358               		.section	.text.StartTransmit,"ax",@progbits
 359               	.global	StartTransmit
 361               	StartTransmit:
 362               	.LFB113:
  98:PacketForwarder.c **** 
  99:PacketForwarder.c **** uint8_t rx_buf[BUFFER_SIZE];
 100:PacketForwarder.c **** uint8_t rx_head;
 101:PacketForwarder.c **** uint8_t rx_tail;
 102:PacketForwarder.c **** 
 103:PacketForwarder.c **** uint8_t tx_buf[BUFFER_SIZE];
 104:PacketForwarder.c **** uint8_t tx_head;
 105:PacketForwarder.c **** uint8_t tx_tail;
 106:PacketForwarder.c **** 
 107:PacketForwarder.c **** uint8_t num_ovf;
 108:PacketForwarder.c **** 
 109:PacketForwarder.c **** 
 110:PacketForwarder.c **** void StartTransmit(void) {
 363               		.loc 2 110 0
 364               		.cfi_startproc
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
 369               	.LBB94:
 111:PacketForwarder.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 370               		.loc 2 111 0
 371 0000 9FB7      		in r25,__SREG__
 372               	.LVL30:
 373               	.LBB95:
 374               	.LBB96:
  50:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     cli();
 375               		.loc 3 50 0
 376               	/* #APP */
 377               	 ;  50 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h" 1
 378 0002 F894      		cli
 379               	 ;  0 "" 2
 380               	.LVL31:
 381               	/* #NOAPP */
 382               	.LBE96:
 383               	.LBE95:
 112:PacketForwarder.c ****         //  If I am not currently transmitting
 113:PacketForwarder.c ****         if (!(UCSR1B & (1 << TXEN1))) {
 384               		.loc 2 113 0
 385 0004 8091 C900 		lds r24,201
 386 0008 83FD      		sbrc r24,3
 387 000a 00C0      		rjmp .L19
 114:PacketForwarder.c ****             UDR1 = tx_buf[tx_tail & (sizeof(tx_buf) - 1)];
 388               		.loc 2 114 0
 389 000c 8091 0000 		lds r24,tx_tail
 390 0010 E82F      		mov r30,r24
 391 0012 EF77      		andi r30,lo8(127)
 392 0014 F0E0      		ldi r31,0
 393 0016 E050      		subi r30,lo8(-(tx_buf))
 394 0018 F040      		sbci r31,hi8(-(tx_buf))
 395 001a 2081      		ld r18,Z
 396 001c 2093 CE00 		sts 206,r18
 115:PacketForwarder.c ****             ++tx_tail;
 397               		.loc 2 115 0
 398 0020 8F5F      		subi r24,lo8(-(1))
 399 0022 8093 0000 		sts tx_tail,r24
 400               	.L19:
 116:PacketForwarder.c ****         }
 117:PacketForwarder.c ****         UCSR1B = UCSR1B | (1 << UDRIE1) | (1 << TXEN1);
 401               		.loc 2 117 0
 402 0026 8091 C900 		lds r24,201
 403 002a 8862      		ori r24,lo8(40)
 404 002c 8093 C900 		sts 201,r24
 405               	.LVL32:
 406               	.LBB97:
 407               	.LBB98:
  70:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     SREG = *__s;
 408               		.loc 3 70 0
 409 0030 9FBF      		out __SREG__,r25
 410               		.loc 3 71 0
 411 0032 0895      		ret
 412               	.LBE98:
 413               	.LBE97:
 414               	.LBE94:
 415               		.cfi_endproc
 416               	.LFE113:
 418               		.section	.text.__vector_24,"ax",@progbits
 419               	.global	__vector_24
 421               	__vector_24:
 422               	.LFB114:
 118:PacketForwarder.c ****     }
 119:PacketForwarder.c **** }
 120:PacketForwarder.c **** 
 121:PacketForwarder.c **** ISR(USART1_UDRE_vect) {
 423               		.loc 2 121 0
 424               		.cfi_startproc
 425 0000 1F92      		push r1
 426               	.LCFI3:
 427               		.cfi_def_cfa_offset 3
 428               		.cfi_offset 1, -2
 429 0002 0F92      		push r0
 430               	.LCFI4:
 431               		.cfi_def_cfa_offset 4
 432               		.cfi_offset 0, -3
 433 0004 0FB6      		in r0,__SREG__
 434 0006 0F92      		push r0
 435 0008 1124      		clr __zero_reg__
 436 000a 8F93      		push r24
 437               	.LCFI5:
 438               		.cfi_def_cfa_offset 5
 439               		.cfi_offset 24, -4
 440 000c 9F93      		push r25
 441               	.LCFI6:
 442               		.cfi_def_cfa_offset 6
 443               		.cfi_offset 25, -5
 444 000e EF93      		push r30
 445               	.LCFI7:
 446               		.cfi_def_cfa_offset 7
 447               		.cfi_offset 30, -6
 448 0010 FF93      		push r31
 449               	.LCFI8:
 450               		.cfi_def_cfa_offset 8
 451               		.cfi_offset 31, -7
 452               	/* prologue: Signal */
 453               	/* frame size = 0 */
 454               	/* stack size = 7 */
 455               	.L__stack_usage = 7
 122:PacketForwarder.c ****     if (tx_head == tx_tail) {
 456               		.loc 2 122 0
 457 0012 8091 0000 		lds r24,tx_tail
 458 0016 9091 0000 		lds r25,tx_head
 459 001a 9813      		cpse r25,r24
 460 001c 00C0      		rjmp .L21
 123:PacketForwarder.c ****         UCSR1B = UCSR1B & !((1 << UDRIE1) | (1 << TXEN1));
 461               		.loc 2 123 0
 462 001e 8091 C900 		lds r24,201
 463 0022 1092 C900 		sts 201,__zero_reg__
 464 0026 00C0      		rjmp .L20
 465               	.L21:
 124:PacketForwarder.c ****     }
 125:PacketForwarder.c ****     else {
 126:PacketForwarder.c ****         UDR1 = tx_buf[tx_tail & (sizeof(tx_buf) - 1)];
 466               		.loc 2 126 0
 467 0028 E82F      		mov r30,r24
 468 002a EF77      		andi r30,lo8(127)
 469 002c F0E0      		ldi r31,0
 470 002e E050      		subi r30,lo8(-(tx_buf))
 471 0030 F040      		sbci r31,hi8(-(tx_buf))
 472 0032 9081      		ld r25,Z
 473 0034 9093 CE00 		sts 206,r25
 127:PacketForwarder.c ****         ++tx_tail;
 474               		.loc 2 127 0
 475 0038 8F5F      		subi r24,lo8(-(1))
 476 003a 8093 0000 		sts tx_tail,r24
 477               	.L20:
 478               	/* epilogue start */
 128:PacketForwarder.c ****     }
 129:PacketForwarder.c **** }
 479               		.loc 2 129 0
 480 003e FF91      		pop r31
 481 0040 EF91      		pop r30
 482 0042 9F91      		pop r25
 483 0044 8F91      		pop r24
 484 0046 0F90      		pop r0
 485 0048 0FBE      		out __SREG__,r0
 486 004a 0F90      		pop r0
 487 004c 1F90      		pop r1
 488 004e 1895      		reti
 489               		.cfi_endproc
 490               	.LFE114:
 492               		.section	.text.__vector_23,"ax",@progbits
 493               	.global	__vector_23
 495               	__vector_23:
 496               	.LFB115:
 130:PacketForwarder.c **** 
 131:PacketForwarder.c **** ISR(USART1_RX_vect) {
 497               		.loc 2 131 0
 498               		.cfi_startproc
 499 0000 1F92      		push r1
 500               	.LCFI9:
 501               		.cfi_def_cfa_offset 3
 502               		.cfi_offset 1, -2
 503 0002 0F92      		push r0
 504               	.LCFI10:
 505               		.cfi_def_cfa_offset 4
 506               		.cfi_offset 0, -3
 507 0004 0FB6      		in r0,__SREG__
 508 0006 0F92      		push r0
 509 0008 1124      		clr __zero_reg__
 510 000a 2F93      		push r18
 511               	.LCFI11:
 512               		.cfi_def_cfa_offset 5
 513               		.cfi_offset 18, -4
 514 000c 8F93      		push r24
 515               	.LCFI12:
 516               		.cfi_def_cfa_offset 6
 517               		.cfi_offset 24, -5
 518 000e 9F93      		push r25
 519               	.LCFI13:
 520               		.cfi_def_cfa_offset 7
 521               		.cfi_offset 25, -6
 522 0010 EF93      		push r30
 523               	.LCFI14:
 524               		.cfi_def_cfa_offset 8
 525               		.cfi_offset 30, -7
 526 0012 FF93      		push r31
 527               	.LCFI15:
 528               		.cfi_def_cfa_offset 9
 529               		.cfi_offset 31, -8
 530               	/* prologue: Signal */
 531               	/* frame size = 0 */
 532               	/* stack size = 8 */
 533               	.L__stack_usage = 8
 132:PacketForwarder.c ****     uint8_t b = UDR1;
 534               		.loc 2 132 0
 535 0014 9091 CE00 		lds r25,206
 536               	.LVL33:
 133:PacketForwarder.c ****     rx_buf[rx_head & (sizeof(rx_buf)-1)] = b;
 537               		.loc 2 133 0
 538 0018 8091 0000 		lds r24,rx_head
 539 001c E82F      		mov r30,r24
 540 001e EF77      		andi r30,lo8(127)
 541 0020 F0E0      		ldi r31,0
 542 0022 E050      		subi r30,lo8(-(rx_buf))
 543 0024 F040      		sbci r31,hi8(-(rx_buf))
 544 0026 9083      		st Z,r25
 134:PacketForwarder.c ****     ++rx_head;
 545               		.loc 2 134 0
 546 0028 8F5F      		subi r24,lo8(-(1))
 547 002a 8093 0000 		sts rx_head,r24
 135:PacketForwarder.c ****     if (rx_head - rx_tail > 127) {
 548               		.loc 2 135 0
 549 002e 90E0      		ldi r25,0
 550               	.LVL34:
 551 0030 2091 0000 		lds r18,rx_tail
 552 0034 821B      		sub r24,r18
 553 0036 9109      		sbc r25,__zero_reg__
 554 0038 8038      		cpi r24,-128
 555 003a 9105      		cpc r25,__zero_reg__
 556 003c 04F0      		brlt .L23
 136:PacketForwarder.c ****         ++num_ovf;
 557               		.loc 2 136 0
 558 003e 8091 0000 		lds r24,num_ovf
 559 0042 8F5F      		subi r24,lo8(-(1))
 560 0044 8093 0000 		sts num_ovf,r24
 561               	.L23:
 562               	/* epilogue start */
 137:PacketForwarder.c ****     }
 138:PacketForwarder.c **** }
 563               		.loc 2 138 0
 564 0048 FF91      		pop r31
 565 004a EF91      		pop r30
 566               	.LVL35:
 567 004c 9F91      		pop r25
 568 004e 8F91      		pop r24
 569 0050 2F91      		pop r18
 570 0052 0F90      		pop r0
 571 0054 0FBE      		out __SREG__,r0
 572 0056 0F90      		pop r0
 573 0058 1F90      		pop r1
 574 005a 1895      		reti
 575               		.cfi_endproc
 576               	.LFE115:
 578               		.section	.text.PacketForwarder_Task,"ax",@progbits
 579               	.global	PacketForwarder_Task
 581               	PacketForwarder_Task:
 582               	.LFB116:
 139:PacketForwarder.c **** 
 140:PacketForwarder.c **** void PacketForwarder_Task(void) {
 583               		.loc 2 140 0
 584               		.cfi_startproc
 585               	/* prologue: function */
 586               	/* frame size = 0 */
 587               	/* stack size = 0 */
 588               	.L__stack_usage = 0
 141:PacketForwarder.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured) {
 589               		.loc 2 141 0
 590 0000 8091 0000 		lds r24,USB_DeviceState
 591 0004 8430      		cpi r24,lo8(4)
 592 0006 01F0      		breq .+2
 593 0008 00C0      		rjmp .L25
 594               	.LVL36:
 595               	.LBB99:
 596               	.LBB100:
 277:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 597               		.loc 5 330 0
 598 000a 82E0      		ldi r24,lo8(2)
 599 000c 8093 E900 		sts 233,r24
 600               	.LBE100:
 601               	.LBE99:
 602               	.LBB101:
 603               	.LBB102:
 331:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 604               		.loc 5 430 0
 605 0010 8091 EE00 		lds r24,238
 606               	.LBE102:
 607               	.LBE101:
 142:PacketForwarder.c **** 	  return;
 143:PacketForwarder.c ****     }
 144:PacketForwarder.c **** 
 145:PacketForwarder.c ****     Endpoint_SelectEndpoint(DATA_TX_EPNUM);
 146:PacketForwarder.c ****     if (Endpoint_IsConfigured() && Endpoint_IsINReady() && Endpoint_IsReadWriteAllowed()) {
 608               		.loc 2 146 0
 609 0014 87FF      		sbrs r24,7
 610 0016 00C0      		rjmp .L29
 611               	.LBB103:
 612               	.LBB104:
 431:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 613               		.loc 5 467 0
 614 0018 8091 E800 		lds r24,232
 615               	.LBE104:
 616               	.LBE103:
 617               		.loc 2 146 0
 618 001c 80FF      		sbrs r24,0
 619 001e 00C0      		rjmp .L29
 620               	.LBB105:
 621               	.LBB106:
 420:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 622               		.loc 5 420 0
 623 0020 8091 E800 		lds r24,232
 624               	.LBE106:
 625               	.LBE105:
 626               		.loc 2 146 0
 627 0024 85FD      		sbrc r24,5
 628 0026 00C0      		rjmp .L38
 629 0028 00C0      		rjmp .L29
 630               	.L32:
 631               	.LBB107:
 147:PacketForwarder.c ****         uint8_t n = DATA_EPSIZE;
 148:PacketForwarder.c ****         while (n > 0 && rx_head != rx_tail) {
 149:PacketForwarder.c ****             Endpoint_Write_8(rx_buf[rx_tail & (sizeof(rx_buf) - 1)]);
 632               		.loc 2 149 0
 633 002a E92F      		mov r30,r25
 634 002c EF77      		andi r30,lo8(127)
 635 002e F0E0      		ldi r31,0
 636 0030 E050      		subi r30,lo8(-(rx_buf))
 637 0032 F040      		sbci r31,hi8(-(rx_buf))
 638 0034 2081      		ld r18,Z
 639               	.LVL37:
 640               	.LBB108:
 641               	.LBB109:
 468:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 532:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 613:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 642               		.loc 5 624 0
 643 0036 2093 F100 		sts 241,r18
 644               	.LBE109:
 645               	.LBE108:
 150:PacketForwarder.c ****             ++rx_tail;
 646               		.loc 2 150 0
 647 003a 9F5F      		subi r25,lo8(-(1))
 648 003c 9093 0000 		sts rx_tail,r25
 151:PacketForwarder.c ****             --n;
 649               		.loc 2 151 0
 650 0040 8150      		subi r24,lo8(-(-1))
 651               	.LVL38:
 148:PacketForwarder.c ****         while (n > 0 && rx_head != rx_tail) {
 652               		.loc 2 148 0
 653 0042 01F4      		brne .L31
 654               	.LVL39:
 655               	.L33:
 656               	.LBB110:
 657               	.LBB111:
 516:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 658               		.loc 5 516 0
 659 0044 8091 E800 		lds r24,232
 660 0048 8E77      		andi r24,lo8(126)
 661 004a 8093 E800 		sts 232,r24
 662 004e 00C0      		rjmp .L29
 663               	.L38:
 664               	.LBE111:
 665               	.LBE110:
 666               	.LBE107:
 146:PacketForwarder.c ****     if (Endpoint_IsConfigured() && Endpoint_IsINReady() && Endpoint_IsReadWriteAllowed()) {
 667               		.loc 2 146 0
 668 0050 80E4      		ldi r24,lo8(64)
 669               	.L31:
 670               	.LBB112:
 148:PacketForwarder.c ****         while (n > 0 && rx_head != rx_tail) {
 671               		.loc 2 148 0 discriminator 2
 672 0052 9091 0000 		lds r25,rx_tail
 673 0056 2091 0000 		lds r18,rx_head
 674 005a 2913      		cpse r18,r25
 675 005c 00C0      		rjmp .L32
 152:PacketForwarder.c ****         }
 153:PacketForwarder.c ****         if (n != DATA_EPSIZE) {
 676               		.loc 2 153 0
 677 005e 8034      		cpi r24,lo8(64)
 678 0060 01F4      		brne .L33
 679               	.L29:
 680               	.LVL40:
 681               	.LBE112:
 682               	.LBB113:
 683               	.LBB114:
 330:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 684               		.loc 5 330 0
 685 0062 83E0      		ldi r24,lo8(3)
 686 0064 8093 E900 		sts 233,r24
 687               	.LBE114:
 688               	.LBE113:
 689               	.LBB115:
 690               	.LBB116:
 430:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 691               		.loc 5 430 0
 692 0068 8091 EE00 		lds r24,238
 693               	.LBE116:
 694               	.LBE115:
 154:PacketForwarder.c ****             /* wrote anything? */
 155:PacketForwarder.c ****             Endpoint_ClearIN();
 156:PacketForwarder.c ****         }
 157:PacketForwarder.c ****     }
 158:PacketForwarder.c **** 
 159:PacketForwarder.c ****     Endpoint_SelectEndpoint(DATA_RX_EPNUM);
 160:PacketForwarder.c ****     if (Endpoint_IsConfigured() && Endpoint_IsOUTReceived() && Endpoint_IsReadWriteAllowed()) {
 695               		.loc 2 160 0
 696 006c 87FF      		sbrs r24,7
 697 006e 00C0      		rjmp .L34
 698               	.LBB117:
 699               	.LBB118:
 479:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 700               		.loc 5 479 0
 701 0070 8091 E800 		lds r24,232
 702               	.LBE118:
 703               	.LBE117:
 704               		.loc 2 160 0
 705 0074 82FF      		sbrs r24,2
 706 0076 00C0      		rjmp .L34
 707               	.LBB119:
 708               	.LBB120:
 420:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 709               		.loc 5 420 0
 710 0078 8091 E800 		lds r24,232
 711               	.LBE120:
 712               	.LBE119:
 713               		.loc 2 160 0
 714 007c 85FF      		sbrs r24,5
 715 007e 00C0      		rjmp .L34
 716               	.LBB121:
 717               	.LBB122:
 718               	.LBB123:
 297:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 719               		.loc 5 297 0
 720 0080 8091 F200 		lds r24,242
 721               	.LVL41:
 722               	.LBE123:
 723               	.LBE122:
 161:PacketForwarder.c ****         uint8_t n = Endpoint_BytesInEndpoint();
 162:PacketForwarder.c ****         while (n > 0) {
 724               		.loc 2 162 0
 725 0084 00C0      		rjmp .L35
 726               	.L36:
 163:PacketForwarder.c ****             tx_buf[tx_head & (sizeof(tx_buf) - 1)] = Endpoint_Read_8();
 727               		.loc 2 163 0
 728 0086 9091 0000 		lds r25,tx_head
 729               	.LBB124:
 730               	.LBB125:
 612:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 731               		.loc 5 612 0
 732 008a 2091 F100 		lds r18,241
 733               	.LBE125:
 734               	.LBE124:
 735               		.loc 2 163 0
 736 008e E92F      		mov r30,r25
 737 0090 EF77      		andi r30,lo8(127)
 738 0092 F0E0      		ldi r31,0
 739 0094 E050      		subi r30,lo8(-(tx_buf))
 740 0096 F040      		sbci r31,hi8(-(tx_buf))
 741 0098 2083      		st Z,r18
 164:PacketForwarder.c ****             ++tx_head;
 742               		.loc 2 164 0
 743 009a 9F5F      		subi r25,lo8(-(1))
 744 009c 9093 0000 		sts tx_head,r25
 165:PacketForwarder.c ****             --n;
 745               		.loc 2 165 0
 746 00a0 8150      		subi r24,lo8(-(-1))
 747               	.LVL42:
 748               	.L35:
 162:PacketForwarder.c ****         while (n > 0) {
 749               		.loc 2 162 0 discriminator 1
 750 00a2 8111      		cpse r24,__zero_reg__
 751 00a4 00C0      		rjmp .L36
 752               	.LBB126:
 753               	.LBB127:
 531:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 754               		.loc 5 531 0
 755 00a6 8091 E800 		lds r24,232
 756               	.LVL43:
 757 00aa 8B77      		andi r24,lo8(123)
 758 00ac 8093 E800 		sts 232,r24
 759               	.LBE127:
 760               	.LBE126:
 166:PacketForwarder.c ****         }
 167:PacketForwarder.c ****         Endpoint_ClearOUT();
 168:PacketForwarder.c ****         StartTransmit();
 761               		.loc 2 168 0
 762 00b0 0E94 0000 		call StartTransmit
 763               	.LVL44:
 764               	.L34:
 765               	.LBE121:
 766               	.LBB128:
 767               	.LBB129:
 330:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 768               		.loc 5 330 0
 769 00b4 81E0      		ldi r24,lo8(1)
 770 00b6 8093 E900 		sts 233,r24
 771               	.LBE129:
 772               	.LBE128:
 773               	.LBB130:
 774               	.LBB131:
 430:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 775               		.loc 5 430 0
 776 00ba 8091 EE00 		lds r24,238
 777               	.LBE131:
 778               	.LBE130:
 169:PacketForwarder.c ****     }
 170:PacketForwarder.c **** 
 171:PacketForwarder.c ****     Endpoint_SelectEndpoint(INFO_EPNUM);
 172:PacketForwarder.c ****     if (Endpoint_IsConfigured() && Endpoint_IsOUTReceived() && Endpoint_IsReadWriteAllowed()) {
 779               		.loc 2 172 0
 780 00be 87FF      		sbrs r24,7
 781 00c0 00C0      		rjmp .L25
 782               	.LBB132:
 783               	.LBB133:
 479:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 784               		.loc 5 479 0
 785 00c2 8091 E800 		lds r24,232
 786               	.LBE133:
 787               	.LBE132:
 788               		.loc 2 172 0
 789 00c6 82FF      		sbrs r24,2
 790 00c8 00C0      		rjmp .L25
 791               	.LBB134:
 792               	.LBB135:
 420:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 793               		.loc 5 420 0
 794 00ca 8091 E800 		lds r24,232
 795               	.LBE135:
 796               	.LBE134:
 797               		.loc 2 172 0
 798 00ce 85FF      		sbrs r24,5
 799 00d0 00C0      		rjmp .L25
 800               	.LBB136:
 173:PacketForwarder.c ****         ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 801               		.loc 2 173 0
 802 00d2 8FB7      		in r24,__SREG__
 803               	.LVL45:
 804               	.LBB137:
 805               	.LBB138:
  50:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     cli();
 806               		.loc 3 50 0
 807               	/* #APP */
 808               	 ;  50 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h" 1
 809 00d4 F894      		cli
 810               	 ;  0 "" 2
 811               	.LVL46:
 812               	/* #NOAPP */
 813               	.LBE138:
 814               	.LBE137:
 174:PacketForwarder.c ****             Endpoint_Write_8(num_ovf);
 815               		.loc 2 174 0
 816 00d6 9091 0000 		lds r25,num_ovf
 817               	.LVL47:
 818               	.LBB139:
 819               	.LBB140:
 820               		.loc 5 624 0
 821 00da 9093 F100 		sts 241,r25
 822               	.LBE140:
 823               	.LBE139:
 175:PacketForwarder.c ****             num_ovf = 0;
 824               		.loc 2 175 0
 825 00de 1092 0000 		sts num_ovf,__zero_reg__
 826               	.LVL48:
 827               	.LBB141:
 828               	.LBB142:
  70:/usr/lib/gcc/avr/4.7.1/../../../../avr/include/util/atomic.h ****     SREG = *__s;
 829               		.loc 3 70 0
 830 00e2 8FBF      		out __SREG__,r24
 831               		.loc 3 71 0
 832               	.LBE142:
 833               	.LBE141:
 834               	.LBE136:
 835               	.LBB143:
 836               	.LBB144:
 516:../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 837               		.loc 5 516 0
 838 00e4 8091 E800 		lds r24,232
 839               	.LVL49:
 840 00e8 8E77      		andi r24,lo8(126)
 841 00ea 8093 E800 		sts 232,r24
 842               	.LVL50:
 843               	.L25:
 844 00ee 0895      		ret
 845               	.LBE144:
 846               	.LBE143:
 847               		.cfi_endproc
 848               	.LFE116:
 850               		.section	.text.startup.main,"ax",@progbits
 851               	.global	main
 853               	main:
 854               	.LFB108:
  30:PacketForwarder.c **** int main(void) {
 855               		.loc 2 30 0
 856               		.cfi_startproc
 857               	/* prologue: function */
 858               	/* frame size = 0 */
 859               	/* stack size = 0 */
 860               	.L__stack_usage = 0
  31:PacketForwarder.c **** 	SetupHardware();
 861               		.loc 2 31 0
 862 0000 0E94 0000 		call SetupHardware
 863               	.LVL51:
  32:PacketForwarder.c **** 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 864               		.loc 2 32 0
 865 0004 80E1      		ldi r24,lo8(16)
 866 0006 0E94 0000 		call LEDs_SetAllLEDs
 867               	.LVL52:
  33:PacketForwarder.c **** 	sei();
 868               		.loc 2 33 0
 869               	/* #APP */
 870               	 ;  33 "PacketForwarder.c" 1
 871 000a 7894      		sei
 872               	 ;  0 "" 2
 873               	/* #NOAPP */
 874               	.L56:
  36:PacketForwarder.c **** 		USB_USBTask();
 875               		.loc 2 36 0 discriminator 1
 876 000c 0E94 0000 		call USB_USBTask
 877               	.LVL53:
  37:PacketForwarder.c **** 		PacketForwarder_Task();
 878               		.loc 2 37 0 discriminator 1
 879 0010 0E94 0000 		call PacketForwarder_Task
 880               	.LVL54:
 881 0014 00C0      		rjmp .L56
 882               		.cfi_endproc
 883               	.LFE108:
 885               		.comm	num_ovf,1,1
 886               		.comm	tx_tail,1,1
 887               		.comm	tx_head,1,1
 888               		.comm	tx_buf,128,1
 889               		.comm	rx_tail,1,1
 890               		.comm	rx_head,1,1
 891               		.comm	rx_buf,128,1
 892               		.text
 893               	.Letext0:
 894               		.file 6 "/usr/lib/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 895               		.file 7 "../../../LUFA-120219/LUFA/Drivers/USB/Core/USBTask.h"
 896               		.file 8 "../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 897               		.file 9 "../../../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 PacketForwarder.c
     /tmp/ccExaO4D.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccExaO4D.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccExaO4D.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccExaO4D.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccExaO4D.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccExaO4D.s:12     .text.LEDs_SetAllLEDs:0000000000000000 LEDs_SetAllLEDs
     /tmp/ccExaO4D.s:37     .text.DebugWrite:0000000000000000 DebugWrite
     /tmp/ccExaO4D.s:115    .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/ccExaO4D.s:227    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccExaO4D.s:245    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccExaO4D.s:263    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccExaO4D.s:361    .text.StartTransmit:0000000000000000 StartTransmit
                            *COM*:0000000000000001 tx_tail
                            *COM*:0000000000000080 tx_buf
     /tmp/ccExaO4D.s:421    .text.__vector_24:0000000000000000 __vector_24
                            *COM*:0000000000000001 tx_head
     /tmp/ccExaO4D.s:495    .text.__vector_23:0000000000000000 __vector_23
                            *COM*:0000000000000001 rx_head
                            *COM*:0000000000000080 rx_buf
                            *COM*:0000000000000001 rx_tail
                            *COM*:0000000000000001 num_ovf
     /tmp/ccExaO4D.s:581    .text.PacketForwarder_Task:0000000000000000 PacketForwarder_Task
     /tmp/ccExaO4D.s:853    .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
USB_Init
Endpoint_ConfigureEndpoint_Prv
USB_DeviceState
USB_USBTask
__do_clear_bss
